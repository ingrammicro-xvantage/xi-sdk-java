/*
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import xiresellers.client.JSON;

/**
 * QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-14T10:07:36.431201Z[Etc/UTC]")
public class QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest {
  public static final String SERIALIZED_NAME_QUOTE_NUMBER = "quoteNumber";
  @SerializedName(SERIALIZED_NAME_QUOTE_NUMBER)
  private String quoteNumber;

  public static final String SERIALIZED_NAME_BID_NUMBER = "bidNumber";
  @SerializedName(SERIALIZED_NAME_BID_NUMBER)
  private String bidNumber;

  public static final String SERIALIZED_NAME_END_USER_NAME = "endUserName";
  @SerializedName(SERIALIZED_NAME_END_USER_NAME)
  private String endUserName;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private LocalDate fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private LocalDate toDate;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";
  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  private String pageIndex;

  public static final String SERIALIZED_NAME_RECORDS_PER_PAGE = "recordsPerPage";
  @SerializedName(SERIALIZED_NAME_RECORDS_PER_PAGE)
  private String recordsPerPage;

  /**
   * Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.
   */
  @JsonAdapter(SortingEnum.Adapter.class)
  public enum SortingEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    SortingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortingEnum fromValue(String value) {
      for (SortingEnum b : SortingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORTING = "sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private SortingEnum sorting;

  public static final String SERIALIZED_NAME_SORTING_COLUMN_NAME = "sortingColumnName";
  @SerializedName(SERIALIZED_NAME_SORTING_COLUMN_NAME)
  private String sortingColumnName;

  public static final String SERIALIZED_NAME_THIRD_PARTY_SOURCE = "thirdPartySource";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_SOURCE)
  private String thirdPartySource;

  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest() {
  }

  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest quoteNumber(String quoteNumber) {
    this.quoteNumber = quoteNumber;
    return this;
  }

   /**
   * Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.
   * @return quoteNumber
  **/
  @javax.annotation.Nullable
  public String getQuoteNumber() {
    return quoteNumber;
  }

  public void setQuoteNumber(String quoteNumber) {
    this.quoteNumber = quoteNumber;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest bidNumber(String bidNumber) {
    this.bidNumber = bidNumber;
    return this;
  }

   /**
   * Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts.
   * @return bidNumber
  **/
  @javax.annotation.Nullable
  public String getBidNumber() {
    return bidNumber;
  }

  public void setBidNumber(String bidNumber) {
    this.bidNumber = bidNumber;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest endUserName(String endUserName) {
    this.endUserName = endUserName;
    return this;
  }

   /**
   * End User Name is the end customer name that is associated with a quote in Ingram Micro&#39;s CRM
   * @return endUserName
  **/
  @javax.annotation.Nullable
  public String getEndUserName() {
    return endUserName;
  }

  public void setEndUserName(String endUserName) {
    this.endUserName = endUserName;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest fromDate(LocalDate fromDate) {
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Filter to select the beginning date of a desired date range. The default filter is set to the date the user is logged-in to request quotes. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;
   * @return fromDate
  **/
  @javax.annotation.Nullable
  public LocalDate getFromDate() {
    return fromDate;
  }

  public void setFromDate(LocalDate fromDate) {
    this.fromDate = fromDate;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest toDate(LocalDate toDate) {
    this.toDate = toDate;
    return this;
  }

   /**
   * Filter to select the end date of a desired date range. The default number of days to request is the previous 30 days from the date user has logged in. Date format: YYYY-MM-DD - An incorrect date input will result in a message \&quot;Date must be entered as YYYY-MM-DD\&quot;
   * @return toDate
  **/
  @javax.annotation.Nullable
  public LocalDate getToDate() {
    return toDate;
  }

  public void setToDate(LocalDate toDate) {
    this.toDate = toDate;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest pageIndex(String pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

   /**
   * Page index or page number for the list of quotes being returned. When less than 25 quotes are returned, the page number will be \&quot;1\&quot;. In cases where more than 25 quotes are returned, and the default quotes per page are 25 (see recordPerPage), then the list will continue on subsequent pages.
   * @return pageIndex
  **/
  @javax.annotation.Nullable
  public String getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(String pageIndex) {
    this.pageIndex = pageIndex;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest recordsPerPage(String recordsPerPage) {
    this.recordsPerPage = recordsPerPage;
    return this;
  }

   /**
   * Number of records (quotes) to display per page in the quote list. The default is 25, but may be increased using the filter by up to 100 records per page. If more than 100 records are requested a message will be returned \&quot;The number of records requested exceeds the 100 record limit.\&quot; 
   * @return recordsPerPage
  **/
  @javax.annotation.Nullable
  public String getRecordsPerPage() {
    return recordsPerPage;
  }

  public void setRecordsPerPage(String recordsPerPage) {
    this.recordsPerPage = recordsPerPage;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest sorting(SortingEnum sorting) {
    this.sorting = sorting;
    return this;
  }

   /**
   * Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.
   * @return sorting
  **/
  @javax.annotation.Nullable
  public SortingEnum getSorting() {
    return sorting;
  }

  public void setSorting(SortingEnum sorting) {
    this.sorting = sorting;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest sortingColumnName(String sortingColumnName) {
    this.sortingColumnName = sortingColumnName;
    return this;
  }

   /**
   * Refers to the column selected to apply the sorting criteria. The default column is dateCreated and will sort by the most recently created quote first with the following in descending order. The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate, expiryDate, and endUserName.
   * @return sortingColumnName
  **/
  @javax.annotation.Nullable
  public String getSortingColumnName() {
    return sortingColumnName;
  }

  public void setSortingColumnName(String sortingColumnName) {
    this.sortingColumnName = sortingColumnName;
  }


  public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest thirdPartySource(String thirdPartySource) {
    this.thirdPartySource = thirdPartySource;
    return this;
  }

   /**
   * Unique identifier used to identify the third party source accessing the services.
   * @return thirdPartySource
  **/
  @javax.annotation.Nullable
  public String getThirdPartySource() {
    return thirdPartySource;
  }

  public void setThirdPartySource(String thirdPartySource) {
    this.thirdPartySource = thirdPartySource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest quoteListRequestQuoteSearchRequestRetrieveQuoteRequest = (QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest) o;
    return Objects.equals(this.quoteNumber, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.quoteNumber) &&
        Objects.equals(this.bidNumber, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.bidNumber) &&
        Objects.equals(this.endUserName, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.endUserName) &&
        Objects.equals(this.fromDate, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.fromDate) &&
        Objects.equals(this.toDate, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.toDate) &&
        Objects.equals(this.pageIndex, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.pageIndex) &&
        Objects.equals(this.recordsPerPage, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.recordsPerPage) &&
        Objects.equals(this.sorting, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.sorting) &&
        Objects.equals(this.sortingColumnName, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.sortingColumnName) &&
        Objects.equals(this.thirdPartySource, quoteListRequestQuoteSearchRequestRetrieveQuoteRequest.thirdPartySource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteNumber, bidNumber, endUserName, fromDate, toDate, pageIndex, recordsPerPage, sorting, sortingColumnName, thirdPartySource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest {\n");
    sb.append("    quoteNumber: ").append(toIndentedString(quoteNumber)).append("\n");
    sb.append("    bidNumber: ").append(toIndentedString(bidNumber)).append("\n");
    sb.append("    endUserName: ").append(toIndentedString(endUserName)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    recordsPerPage: ").append(toIndentedString(recordsPerPage)).append("\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    sortingColumnName: ").append(toIndentedString(sortingColumnName)).append("\n");
    sb.append("    thirdPartySource: ").append(toIndentedString(thirdPartySource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quoteNumber");
    openapiFields.add("bidNumber");
    openapiFields.add("endUserName");
    openapiFields.add("fromDate");
    openapiFields.add("toDate");
    openapiFields.add("pageIndex");
    openapiFields.add("recordsPerPage");
    openapiFields.add("sorting");
    openapiFields.add("sortingColumnName");
    openapiFields.add("thirdPartySource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest is not found in the empty JSON string", QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("quoteNumber") != null && !jsonObj.get("quoteNumber").isJsonNull()) && !jsonObj.get("quoteNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteNumber").toString()));
      }
      if ((jsonObj.get("bidNumber") != null && !jsonObj.get("bidNumber").isJsonNull()) && !jsonObj.get("bidNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidNumber").toString()));
      }
      if ((jsonObj.get("endUserName") != null && !jsonObj.get("endUserName").isJsonNull()) && !jsonObj.get("endUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endUserName").toString()));
      }
      if ((jsonObj.get("pageIndex") != null && !jsonObj.get("pageIndex").isJsonNull()) && !jsonObj.get("pageIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageIndex").toString()));
      }
      if ((jsonObj.get("recordsPerPage") != null && !jsonObj.get("recordsPerPage").isJsonNull()) && !jsonObj.get("recordsPerPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordsPerPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordsPerPage").toString()));
      }
      if ((jsonObj.get("sorting") != null && !jsonObj.get("sorting").isJsonNull()) && !jsonObj.get("sorting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sorting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sorting").toString()));
      }
      // validate the optional field `sorting`
      if (jsonObj.get("sorting") != null && !jsonObj.get("sorting").isJsonNull()) {
        SortingEnum.validateJsonElement(jsonObj.get("sorting"));
      }
      if ((jsonObj.get("sortingColumnName") != null && !jsonObj.get("sortingColumnName").isJsonNull()) && !jsonObj.get("sortingColumnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortingColumnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortingColumnName").toString()));
      }
      if ((jsonObj.get("thirdPartySource") != null && !jsonObj.get("thirdPartySource").isJsonNull()) && !jsonObj.get("thirdPartySource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartySource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartySource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest>() {
           @Override
           public void write(JsonWriter out, QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest
  * @throws IOException if the JSON string is invalid with respect to QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest
  */
  public static QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest.class);
  }

 /**
  * Convert an instance of QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

