/*
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import xiresellers.client.model.MultiSKUPriceAndStockRequestServicerequestPriceandstockrequestItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import xiresellers.client.JSON;

/**
 * MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-14T10:07:36.431201Z[Etc/UTC]")
public class MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest {
  public static final String SERIALIZED_NAME_SHOWWAREHOUSEAVAILABILITY = "showwarehouseavailability";
  @SerializedName(SERIALIZED_NAME_SHOWWAREHOUSEAVAILABILITY)
  private String showwarehouseavailability;

  public static final String SERIALIZED_NAME_EXTRAVAILABILITYFLAG = "extravailabilityflag";
  @SerializedName(SERIALIZED_NAME_EXTRAVAILABILITYFLAG)
  private String extravailabilityflag;

  public static final String SERIALIZED_NAME_INCLUDEALLSYSTEMS = "includeallsystems";
  @SerializedName(SERIALIZED_NAME_INCLUDEALLSYSTEMS)
  private Boolean includeallsystems;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private MultiSKUPriceAndStockRequestServicerequestPriceandstockrequestItem item;

  public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest() {
  }

  public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest showwarehouseavailability(String showwarehouseavailability) {
    this.showwarehouseavailability = showwarehouseavailability;
    return this;
  }

   /**
   * True/false to show the availability of individual warehouses
   * @return showwarehouseavailability
  **/
  @javax.annotation.Nullable
  public String getShowwarehouseavailability() {
    return showwarehouseavailability;
  }

  public void setShowwarehouseavailability(String showwarehouseavailability) {
    this.showwarehouseavailability = showwarehouseavailability;
  }


  public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest extravailabilityflag(String extravailabilityflag) {
    this.extravailabilityflag = extravailabilityflag;
    return this;
  }

   /**
   * Y/N to show extra availability flag
   * @return extravailabilityflag
  **/
  @javax.annotation.Nullable
  public String getExtravailabilityflag() {
    return extravailabilityflag;
  }

  public void setExtravailabilityflag(String extravailabilityflag) {
    this.extravailabilityflag = extravailabilityflag;
  }


  public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest includeallsystems(Boolean includeallsystems) {
    this.includeallsystems = includeallsystems;
    return this;
  }

   /**
   * Flag to indicate if the price and stock information is required for all Ingram Micro systems. If it is set to true, the price and stock details will be returned from all Ingram Micro systems and if false, the price and stock will have returned from the system where the reseller number is set up in.
   * @return includeallsystems
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeallsystems() {
    return includeallsystems;
  }

  public void setIncludeallsystems(Boolean includeallsystems) {
    this.includeallsystems = includeallsystems;
  }


  public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest item(MultiSKUPriceAndStockRequestServicerequestPriceandstockrequestItem item) {
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @javax.annotation.Nullable
  public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequestItem getItem() {
    return item;
  }

  public void setItem(MultiSKUPriceAndStockRequestServicerequestPriceandstockrequestItem item) {
    this.item = item;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest multiSKUPriceAndStockRequestServicerequestPriceandstockrequest = (MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest) o;
    return Objects.equals(this.showwarehouseavailability, multiSKUPriceAndStockRequestServicerequestPriceandstockrequest.showwarehouseavailability) &&
        Objects.equals(this.extravailabilityflag, multiSKUPriceAndStockRequestServicerequestPriceandstockrequest.extravailabilityflag) &&
        Objects.equals(this.includeallsystems, multiSKUPriceAndStockRequestServicerequestPriceandstockrequest.includeallsystems) &&
        Objects.equals(this.item, multiSKUPriceAndStockRequestServicerequestPriceandstockrequest.item);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showwarehouseavailability, extravailabilityflag, includeallsystems, item);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest {\n");
    sb.append("    showwarehouseavailability: ").append(toIndentedString(showwarehouseavailability)).append("\n");
    sb.append("    extravailabilityflag: ").append(toIndentedString(extravailabilityflag)).append("\n");
    sb.append("    includeallsystems: ").append(toIndentedString(includeallsystems)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("showwarehouseavailability");
    openapiFields.add("extravailabilityflag");
    openapiFields.add("includeallsystems");
    openapiFields.add("item");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest is not found in the empty JSON string", MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("showwarehouseavailability") != null && !jsonObj.get("showwarehouseavailability").isJsonNull()) && !jsonObj.get("showwarehouseavailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `showwarehouseavailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("showwarehouseavailability").toString()));
      }
      if ((jsonObj.get("extravailabilityflag") != null && !jsonObj.get("extravailabilityflag").isJsonNull()) && !jsonObj.get("extravailabilityflag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extravailabilityflag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extravailabilityflag").toString()));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        MultiSKUPriceAndStockRequestServicerequestPriceandstockrequestItem.validateJsonElement(jsonObj.get("item"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest>() {
           @Override
           public void write(JsonWriter out, MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest
  * @throws IOException if the JSON string is invalid with respect to MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest
  */
  public static MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest.class);
  }

 /**
  * Convert an instance of MultiSKUPriceAndStockRequestServicerequestPriceandstockrequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

