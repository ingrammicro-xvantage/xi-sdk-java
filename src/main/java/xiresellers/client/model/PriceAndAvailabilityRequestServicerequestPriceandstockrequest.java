/*
 * Reseller API
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import xiresellers.client.model.PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import xiresellers.client.JSON;

/**
 * PriceAndAvailabilityRequestServicerequestPriceandstockrequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T11:54:36.350241Z[Etc/UTC]")
public class PriceAndAvailabilityRequestServicerequestPriceandstockrequest {
  public static final String SERIALIZED_NAME_SHOWWAREHOUSEAVAILABILITY = "showwarehouseavailability";
  @SerializedName(SERIALIZED_NAME_SHOWWAREHOUSEAVAILABILITY)
  private String showwarehouseavailability;

  public static final String SERIALIZED_NAME_EXTRAVAILABILITYFLAG = "extravailabilityflag";
  @SerializedName(SERIALIZED_NAME_EXTRAVAILABILITYFLAG)
  private String extravailabilityflag;

  public static final String SERIALIZED_NAME_INCLUDEALLSYSTEMS = "includeallsystems";
  @SerializedName(SERIALIZED_NAME_INCLUDEALLSYSTEMS)
  private Boolean includeallsystems;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner> item;

  public PriceAndAvailabilityRequestServicerequestPriceandstockrequest() {
  }

  public PriceAndAvailabilityRequestServicerequestPriceandstockrequest showwarehouseavailability(String showwarehouseavailability) {
    this.showwarehouseavailability = showwarehouseavailability;
    return this;
  }

   /**
   * True/false to show the availability of individual warehouses
   * @return showwarehouseavailability
  **/
  @javax.annotation.Nullable
  public String getShowwarehouseavailability() {
    return showwarehouseavailability;
  }

  public void setShowwarehouseavailability(String showwarehouseavailability) {
    this.showwarehouseavailability = showwarehouseavailability;
  }


  public PriceAndAvailabilityRequestServicerequestPriceandstockrequest extravailabilityflag(String extravailabilityflag) {
    this.extravailabilityflag = extravailabilityflag;
    return this;
  }

   /**
   * Y/N to show extra availability flag
   * @return extravailabilityflag
  **/
  @javax.annotation.Nullable
  public String getExtravailabilityflag() {
    return extravailabilityflag;
  }

  public void setExtravailabilityflag(String extravailabilityflag) {
    this.extravailabilityflag = extravailabilityflag;
  }


  public PriceAndAvailabilityRequestServicerequestPriceandstockrequest includeallsystems(Boolean includeallsystems) {
    this.includeallsystems = includeallsystems;
    return this;
  }

   /**
   * Flag to indicate if the price and stock information is required for all Ingram Micro systems.
   * @return includeallsystems
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeallsystems() {
    return includeallsystems;
  }

  public void setIncludeallsystems(Boolean includeallsystems) {
    this.includeallsystems = includeallsystems;
  }


  public PriceAndAvailabilityRequestServicerequestPriceandstockrequest item(List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner> item) {
    this.item = item;
    return this;
  }

  public PriceAndAvailabilityRequestServicerequestPriceandstockrequest addItemItem(PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner itemItem) {
    if (this.item == null) {
      this.item = new ArrayList<>();
    }
    this.item.add(itemItem);
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @javax.annotation.Nullable
  public List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner> getItem() {
    return item;
  }

  public void setItem(List<PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner> item) {
    this.item = item;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceAndAvailabilityRequestServicerequestPriceandstockrequest priceAndAvailabilityRequestServicerequestPriceandstockrequest = (PriceAndAvailabilityRequestServicerequestPriceandstockrequest) o;
    return Objects.equals(this.showwarehouseavailability, priceAndAvailabilityRequestServicerequestPriceandstockrequest.showwarehouseavailability) &&
        Objects.equals(this.extravailabilityflag, priceAndAvailabilityRequestServicerequestPriceandstockrequest.extravailabilityflag) &&
        Objects.equals(this.includeallsystems, priceAndAvailabilityRequestServicerequestPriceandstockrequest.includeallsystems) &&
        Objects.equals(this.item, priceAndAvailabilityRequestServicerequestPriceandstockrequest.item);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showwarehouseavailability, extravailabilityflag, includeallsystems, item);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceAndAvailabilityRequestServicerequestPriceandstockrequest {\n");
    sb.append("    showwarehouseavailability: ").append(toIndentedString(showwarehouseavailability)).append("\n");
    sb.append("    extravailabilityflag: ").append(toIndentedString(extravailabilityflag)).append("\n");
    sb.append("    includeallsystems: ").append(toIndentedString(includeallsystems)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("showwarehouseavailability");
    openapiFields.add("extravailabilityflag");
    openapiFields.add("includeallsystems");
    openapiFields.add("item");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PriceAndAvailabilityRequestServicerequestPriceandstockrequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceAndAvailabilityRequestServicerequestPriceandstockrequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceAndAvailabilityRequestServicerequestPriceandstockrequest is not found in the empty JSON string", PriceAndAvailabilityRequestServicerequestPriceandstockrequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceAndAvailabilityRequestServicerequestPriceandstockrequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceAndAvailabilityRequestServicerequestPriceandstockrequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("showwarehouseavailability") != null && !jsonObj.get("showwarehouseavailability").isJsonNull()) && !jsonObj.get("showwarehouseavailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `showwarehouseavailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("showwarehouseavailability").toString()));
      }
      if ((jsonObj.get("extravailabilityflag") != null && !jsonObj.get("extravailabilityflag").isJsonNull()) && !jsonObj.get("extravailabilityflag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extravailabilityflag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extravailabilityflag").toString()));
      }
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        JsonArray jsonArrayitem = jsonObj.getAsJsonArray("item");
        if (jsonArrayitem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("item").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `item` to be an array in the JSON string but got `%s`", jsonObj.get("item").toString()));
          }

          // validate the optional field `item` (array)
          for (int i = 0; i < jsonArrayitem.size(); i++) {
            PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner.validateJsonElement(jsonArrayitem.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceAndAvailabilityRequestServicerequestPriceandstockrequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceAndAvailabilityRequestServicerequestPriceandstockrequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceAndAvailabilityRequestServicerequestPriceandstockrequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceAndAvailabilityRequestServicerequestPriceandstockrequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceAndAvailabilityRequestServicerequestPriceandstockrequest>() {
           @Override
           public void write(JsonWriter out, PriceAndAvailabilityRequestServicerequestPriceandstockrequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceAndAvailabilityRequestServicerequestPriceandstockrequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PriceAndAvailabilityRequestServicerequestPriceandstockrequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PriceAndAvailabilityRequestServicerequestPriceandstockrequest
  * @throws IOException if the JSON string is invalid with respect to PriceAndAvailabilityRequestServicerequestPriceandstockrequest
  */
  public static PriceAndAvailabilityRequestServicerequestPriceandstockrequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceAndAvailabilityRequestServicerequestPriceandstockrequest.class);
  }

 /**
  * Convert an instance of PriceAndAvailabilityRequestServicerequestPriceandstockrequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

