/*
 * Reseller API
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import xiresellers.client.model.OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import xiresellers.client.JSON;

/**
 * OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-22T11:06:29.712836Z[Etc/UTC]")
public class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner {
  public static final String SERIALIZED_NAME_SUBORDERNUMBER = "subordernumber";
  @SerializedName(SERIALIZED_NAME_SUBORDERNUMBER)
  private String subordernumber;

  public static final String SERIALIZED_NAME_STATUSCODE = "statuscode";
  @SerializedName(SERIALIZED_NAME_STATUSCODE)
  private String statuscode;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_HOLDREASONCODE = "holdreasoncode";
  @SerializedName(SERIALIZED_NAME_HOLDREASONCODE)
  private String holdreasoncode;

  public static final String SERIALIZED_NAME_HOLDREASON = "holdreason";
  @SerializedName(SERIALIZED_NAME_HOLDREASON)
  private String holdreason;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> links;

  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner() {
  }

  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner subordernumber(String subordernumber) {
    this.subordernumber = subordernumber;
    return this;
  }

   /**
   * A sub order number
   * @return subordernumber
  **/
  @javax.annotation.Nullable
  public String getSubordernumber() {
    return subordernumber;
  }

  public void setSubordernumber(String subordernumber) {
    this.subordernumber = subordernumber;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner statuscode(String statuscode) {
    this.statuscode = statuscode;
    return this;
  }

   /**
   * Order status code
   * @return statuscode
  **/
  @javax.annotation.Nullable
  public String getStatuscode() {
    return statuscode;
  }

  public void setStatuscode(String statuscode) {
    this.statuscode = statuscode;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Details of the order statuscode - i.e. statuscode &#x3D; 4 then status &#x3D; SHIPPED
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner holdreasoncode(String holdreasoncode) {
    this.holdreasoncode = holdreasoncode;
    return this;
  }

   /**
   * Will be returned in case of order on hold
   * @return holdreasoncode
  **/
  @javax.annotation.Nullable
  public String getHoldreasoncode() {
    return holdreasoncode;
  }

  public void setHoldreasoncode(String holdreasoncode) {
    this.holdreasoncode = holdreasoncode;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner holdreason(String holdreason) {
    this.holdreason = holdreason;
    return this;
  }

   /**
   * Reason for order hold - will be returned if the order is on hold
   * @return holdreason
  **/
  @javax.annotation.Nullable
  public String getHoldreason() {
    return holdreason;
  }

  public void setHoldreason(String holdreason) {
    this.holdreason = holdreason;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner links(List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> links) {
    this.links = links;
    return this;
  }

  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner addLinksItem(OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * HATEOAS links for the details and invoices of the sub-orders if available
   * @return links
  **/
  @javax.annotation.Nullable
  public List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> getLinks() {
    return links;
  }

  public void setLinks(List<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner = (OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner) o;
    return Objects.equals(this.subordernumber, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.subordernumber) &&
        Objects.equals(this.statuscode, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.statuscode) &&
        Objects.equals(this.status, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.status) &&
        Objects.equals(this.holdreasoncode, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.holdreasoncode) &&
        Objects.equals(this.holdreason, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.holdreason) &&
        Objects.equals(this.links, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subordernumber, statuscode, status, holdreasoncode, holdreason, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner {\n");
    sb.append("    subordernumber: ").append(toIndentedString(subordernumber)).append("\n");
    sb.append("    statuscode: ").append(toIndentedString(statuscode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    holdreasoncode: ").append(toIndentedString(holdreasoncode)).append("\n");
    sb.append("    holdreason: ").append(toIndentedString(holdreason)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subordernumber");
    openapiFields.add("statuscode");
    openapiFields.add("status");
    openapiFields.add("holdreasoncode");
    openapiFields.add("holdreason");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner is not found in the empty JSON string", OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("subordernumber") != null && !jsonObj.get("subordernumber").isJsonNull()) && !jsonObj.get("subordernumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subordernumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subordernumber").toString()));
      }
      if ((jsonObj.get("statuscode") != null && !jsonObj.get("statuscode").isJsonNull()) && !jsonObj.get("statuscode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuscode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuscode").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("holdreasoncode") != null && !jsonObj.get("holdreasoncode").isJsonNull()) && !jsonObj.get("holdreasoncode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdreasoncode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdreasoncode").toString()));
      }
      if ((jsonObj.get("holdreason") != null && !jsonObj.get("holdreason").isJsonNull()) && !jsonObj.get("holdreason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holdreason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holdreason").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner>() {
           @Override
           public void write(JsonWriter out, OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner
  * @throws IOException if the JSON string is invalid with respect to OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner
  */
  public static OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner.class);
  }

 /**
  * Convert an instance of OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

