/*
 * Reseller API
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import xiresellers.client.JSON;

/**
 * OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-22T11:06:29.712836Z[Etc/UTC]")
public class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner {
  /**
   * topic being orders or invoices, if it is orders then the link will provide details of the order. If its invoices then the link provides details of the invoice
   */
  @JsonAdapter(TopicEnum.Adapter.class)
  public enum TopicEnum {
    ORDERS("orders"),
    
    INVOICES("invoices");

    private String value;

    TopicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TopicEnum fromValue(String value) {
      for (TopicEnum b : TopicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TopicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TopicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TopicEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TopicEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private TopicEnum topic;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  /**
   * The type of call that can be made to the href link
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner() {
  }

  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner topic(TopicEnum topic) {
    this.topic = topic;
    return this;
  }

   /**
   * topic being orders or invoices, if it is orders then the link will provide details of the order. If its invoices then the link provides details of the invoice
   * @return topic
  **/
  @javax.annotation.Nullable
  public TopicEnum getTopic() {
    return topic;
  }

  public void setTopic(TopicEnum topic) {
    this.topic = topic;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner href(URI href) {
    this.href = href;
    return this;
  }

   /**
   * The API endpoint for accessing the relevant data
   * @return href
  **/
  @javax.annotation.Nullable
  public URI getHref() {
    return href;
  }

  public void setHref(URI href) {
    this.href = href;
  }


  public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of call that can be made to the href link
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner = (OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner) o;
    return Objects.equals(this.topic, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.topic) &&
        Objects.equals(this.href, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.href) &&
        Objects.equals(this.type, orderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topic, href, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner {\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topic");
    openapiFields.add("href");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner is not found in the empty JSON string", OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      // validate the optional field `topic`
      if (jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) {
        TopicEnum.validateJsonElement(jsonObj.get("topic"));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner>() {
           @Override
           public void write(JsonWriter out, OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner
  * @throws IOException if the JSON string is invalid with respect to OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner
  */
  public static OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner.class);
  }

 /**
  * Convert an instance of OrderSearchResponseServiceResponseOrdersearchresponseOrdersInnerSubordersInnerLinksInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

