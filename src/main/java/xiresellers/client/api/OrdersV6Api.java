/*
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.api;

import xiresellers.client.ApiCallback;
import xiresellers.client.ApiClient;
import xiresellers.client.ApiException;
import xiresellers.client.ApiResponse;
import xiresellers.client.Configuration;
import xiresellers.client.Pair;
import xiresellers.client.ProgressRequestBody;
import xiresellers.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xiresellers.client.model.ErrorResponse;
import java.time.LocalDate;
import xiresellers.client.model.OrderDetailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersV6Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersV6Api() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersV6Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrderdetailsV6
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderdetailsV6Call(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/orders/{ordernumber}"
            .replace("{" + "ordernumber" + "}", localVarApiClient.escapeString(ordernumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingramOrderDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingramOrderDate", ingramOrderDate));
        }

        if (vendorNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorNumber", vendorNumber));
        }

        if (simulateStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simulateStatus", simulateStatus));
        }

        if (isIml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isIml", isIml));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderdetailsV6ValidateBeforeCall(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ordernumber' is set
        if (ordernumber == null) {
            throw new ApiException("Missing the required parameter 'ordernumber' when calling getOrderdetailsV6(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getOrderdetailsV6(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getOrderdetailsV6(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getOrderdetailsV6(Async)");
        }

        return getOrderdetailsV6Call(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, _callback);

    }

    /**
     * Get Order Details v6
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @return OrderDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrderDetailResponse getOrderdetailsV6(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode) throws ApiException {
        ApiResponse<OrderDetailResponse> localVarResp = getOrderdetailsV6WithHttpInfo(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode);
        return localVarResp.getData();
    }

    /**
     * Get Order Details v6
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @return ApiResponse&lt;OrderDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDetailResponse> getOrderdetailsV6WithHttpInfo(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode) throws ApiException {
        okhttp3.Call localVarCall = getOrderdetailsV6ValidateBeforeCall(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, null);
        Type localVarReturnType = new TypeToken<OrderDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Details v6 (asynchronously)
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.  The sales order number, IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters.  In a case when the IM sales order number is repeated, you can refine the result by providing for additional filtering.  Use the \&quot;simulateStatus\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderdetailsV6Async(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode, final ApiCallback<OrderDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderdetailsV6ValidateBeforeCall(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, _callback);
        Type localVarReturnType = new TypeToken<OrderDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
