/*
 * XI Sdk Resellers
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.api;

import xiresellers.client.ApiCallback;
import xiresellers.client.ApiClient;
import xiresellers.client.ApiException;
import xiresellers.client.ApiResponse;
import xiresellers.client.Configuration;
import xiresellers.client.Pair;
import xiresellers.client.ProgressRequestBody;
import xiresellers.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xiresellers.client.model.ErrorResponse;
import xiresellers.client.model.GetResellerV6ProductsearchPlanIDParameter;
import xiresellers.client.model.PriceAndAvailabilityRequest;
import xiresellers.client.model.PriceAndAvailabilityResponseInner;
import xiresellers.client.model.ProductDetailResponse;
import xiresellers.client.model.ProductSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductCatalogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductCatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductCatalogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getResellerV6Productdetail
     * @param ingramPartNumber Ingram Micro unique part number for the product (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ProductdetailCall(String ingramPartNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/catalog/details/{ingramPartNumber}"
            .replace("{" + "ingramPartNumber" + "}", localVarApiClient.escapeString(ingramPartNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellerV6ProductdetailValidateBeforeCall(String ingramPartNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ingramPartNumber' is set
        if (ingramPartNumber == null) {
            throw new ApiException("Missing the required parameter 'ingramPartNumber' when calling getResellerV6Productdetail(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellerV6Productdetail(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellerV6Productdetail(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellerV6Productdetail(Async)");
        }

        return getResellerV6ProductdetailCall(ingramPartNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, _callback);

    }

    /**
     * Product Details
     * Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
     * @param ingramPartNumber Ingram Micro unique part number for the product (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @return ProductDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProductDetailResponse getResellerV6Productdetail(String ingramPartNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID) throws ApiException {
        ApiResponse<ProductDetailResponse> localVarResp = getResellerV6ProductdetailWithHttpInfo(ingramPartNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Product Details
     * Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
     * @param ingramPartNumber Ingram Micro unique part number for the product (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @return ApiResponse&lt;ProductDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDetailResponse> getResellerV6ProductdetailWithHttpInfo(String ingramPartNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = getResellerV6ProductdetailValidateBeforeCall(ingramPartNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, null);
        Type localVarReturnType = new TypeToken<ProductDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Details (asynchronously)
     * Search all the product-related details using a unique Ingram Part Number. Currently, this API is available in the USA, India, and Netherlands.
     * @param ingramPartNumber Ingram Micro unique part number for the product (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ProductdetailAsync(String ingramPartNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, final ApiCallback<ProductDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellerV6ProductdetailValidateBeforeCall(ingramPartNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<ProductDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResellerV6ProductdetailCmp
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @param vendorPartNumber Vendor’s part number for the product. (optional)
     * @param planName Name of the subscription plan (optional)
     * @param planId Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ProductdetailCmpCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String vendorPartNumber, String planName, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/catalog/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorPartNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorPartNumber", vendorPartNumber));
        }

        if (planName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planName", planName));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellerV6ProductdetailCmpValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String vendorPartNumber, String planName, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellerV6ProductdetailCmp(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellerV6ProductdetailCmp(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellerV6ProductdetailCmp(Async)");
        }

        return getResellerV6ProductdetailCmpCall(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, vendorPartNumber, planName, planId, _callback);

    }

    /**
     * Product Details
     * Search all the product-related details using a unique Ingram Part Number.
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @param vendorPartNumber Vendor’s part number for the product. (optional)
     * @param planName Name of the subscription plan (optional)
     * @param planId Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)
     * @return ProductDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProductDetailResponse getResellerV6ProductdetailCmp(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String vendorPartNumber, String planName, String planId) throws ApiException {
        ApiResponse<ProductDetailResponse> localVarResp = getResellerV6ProductdetailCmpWithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, vendorPartNumber, planName, planId);
        return localVarResp.getData();
    }

    /**
     * Product Details
     * Search all the product-related details using a unique Ingram Part Number.
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @param vendorPartNumber Vendor’s part number for the product. (optional)
     * @param planName Name of the subscription plan (optional)
     * @param planId Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)
     * @return ApiResponse&lt;ProductDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDetailResponse> getResellerV6ProductdetailCmpWithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String vendorPartNumber, String planName, String planId) throws ApiException {
        okhttp3.Call localVarCall = getResellerV6ProductdetailCmpValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, vendorPartNumber, planName, planId, null);
        Type localVarReturnType = new TypeToken<ProductDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Details (asynchronously)
     * Search all the product-related details using a unique Ingram Part Number.
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems (required)
     * @param imSenderID Sender Identification text (optional)
     * @param vendorPartNumber Vendor’s part number for the product. (optional)
     * @param planName Name of the subscription plan (optional)
     * @param planId Id of the subscription plan.   &lt;span style&#x3D;&#39;color:red&#39;&gt;To search for details of subscription products, customer must pass either vendorPartNumber, planName or planId.&lt;/span&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ProductdetailCmpAsync(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String vendorPartNumber, String planName, String planId, final ApiCallback<ProductDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellerV6ProductdetailCmpValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, vendorPartNumber, planName, planId, _callback);
        Type localVarReturnType = new TypeToken<ProductDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResellerV6Productsearch
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param pageNumber Current page number. Default is 1 (optional)
     * @param pageSize Number of records required in the call - max records 100 per page (optional)
     * @param imSenderID Sender Identification text (optional)
     * @param type The SKU type of product. One of Physical, Digital, or Any. (optional)
     * @param hasDiscounts Specifies if there are discounts available for the product. (optional)
     * @param vendor The name of the vendor/manufacturer of the product. (optional)
     * @param vendorPartNumber The vendors part number for the product. (optional)
     * @param acceptLanguage Header to the API calls, the content will help us identify the response language. (optional, default to en)
     * @param vendorNumber Vendor number of the product (optional)
     * @param keyword Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)
     * @param category The category of the product. Example: Displays. (optional)
     * @param skipAuthorisation This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)
     * @param groupName Name of the Product Group (optional)
     * @param planID ID of the plan (optional)
     * @param showGroupInfo In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a ProductSearchv6ResponseElement to be returned </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ProductsearchCall(String imCustomerNumber, String imCorrelationID, String imCountryCode, Integer pageNumber, Integer pageSize, String imSenderID, String type, String hasDiscounts, List<String> vendor, List<String> vendorPartNumber, String acceptLanguage, String vendorNumber, List<String> keyword, String category, String skipAuthorisation, String groupName, GetResellerV6ProductsearchPlanIDParameter planID, Boolean showGroupInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/catalog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (hasDiscounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasDiscounts", hasDiscounts));
        }

        if (vendor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "vendor", vendor));
        }

        if (vendorPartNumber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "vendorPartNumber", vendorPartNumber));
        }

        if (vendorNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorNumber", vendorNumber));
        }

        if (keyword != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keyword", keyword));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (skipAuthorisation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipAuthorisation", skipAuthorisation));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupName", groupName));
        }

        if (planID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planID", planID));
        }

        if (showGroupInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showGroupInfo", showGroupInfo));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellerV6ProductsearchValidateBeforeCall(String imCustomerNumber, String imCorrelationID, String imCountryCode, Integer pageNumber, Integer pageSize, String imSenderID, String type, String hasDiscounts, List<String> vendor, List<String> vendorPartNumber, String acceptLanguage, String vendorNumber, List<String> keyword, String category, String skipAuthorisation, String groupName, GetResellerV6ProductsearchPlanIDParameter planID, Boolean showGroupInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellerV6Productsearch(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellerV6Productsearch(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellerV6Productsearch(Async)");
        }

        return getResellerV6ProductsearchCall(imCustomerNumber, imCorrelationID, imCountryCode, pageNumber, pageSize, imSenderID, type, hasDiscounts, vendor, vendorPartNumber, acceptLanguage, vendorNumber, keyword, category, skipAuthorisation, groupName, planID, showGroupInfo, _callback);

    }

    /**
     * Search Products
     * Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param pageNumber Current page number. Default is 1 (optional)
     * @param pageSize Number of records required in the call - max records 100 per page (optional)
     * @param imSenderID Sender Identification text (optional)
     * @param type The SKU type of product. One of Physical, Digital, or Any. (optional)
     * @param hasDiscounts Specifies if there are discounts available for the product. (optional)
     * @param vendor The name of the vendor/manufacturer of the product. (optional)
     * @param vendorPartNumber The vendors part number for the product. (optional)
     * @param acceptLanguage Header to the API calls, the content will help us identify the response language. (optional, default to en)
     * @param vendorNumber Vendor number of the product (optional)
     * @param keyword Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)
     * @param category The category of the product. Example: Displays. (optional)
     * @param skipAuthorisation This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)
     * @param groupName Name of the Product Group (optional)
     * @param planID ID of the plan (optional)
     * @param showGroupInfo In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)
     * @return ProductSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a ProductSearchv6ResponseElement to be returned </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
     </table>
     */
    public ProductSearchResponse getResellerV6Productsearch(String imCustomerNumber, String imCorrelationID, String imCountryCode, Integer pageNumber, Integer pageSize, String imSenderID, String type, String hasDiscounts, List<String> vendor, List<String> vendorPartNumber, String acceptLanguage, String vendorNumber, List<String> keyword, String category, String skipAuthorisation, String groupName, GetResellerV6ProductsearchPlanIDParameter planID, Boolean showGroupInfo) throws ApiException {
        ApiResponse<ProductSearchResponse> localVarResp = getResellerV6ProductsearchWithHttpInfo(imCustomerNumber, imCorrelationID, imCountryCode, pageNumber, pageSize, imSenderID, type, hasDiscounts, vendor, vendorPartNumber, acceptLanguage, vendorNumber, keyword, category, skipAuthorisation, groupName, planID, showGroupInfo);
        return localVarResp.getData();
    }

    /**
     * Search Products
     * Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param pageNumber Current page number. Default is 1 (optional)
     * @param pageSize Number of records required in the call - max records 100 per page (optional)
     * @param imSenderID Sender Identification text (optional)
     * @param type The SKU type of product. One of Physical, Digital, or Any. (optional)
     * @param hasDiscounts Specifies if there are discounts available for the product. (optional)
     * @param vendor The name of the vendor/manufacturer of the product. (optional)
     * @param vendorPartNumber The vendors part number for the product. (optional)
     * @param acceptLanguage Header to the API calls, the content will help us identify the response language. (optional, default to en)
     * @param vendorNumber Vendor number of the product (optional)
     * @param keyword Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)
     * @param category The category of the product. Example: Displays. (optional)
     * @param skipAuthorisation This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)
     * @param groupName Name of the Product Group (optional)
     * @param planID ID of the plan (optional)
     * @param showGroupInfo In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)
     * @return ApiResponse&lt;ProductSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a ProductSearchv6ResponseElement to be returned </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
     </table>
     */
    public ApiResponse<ProductSearchResponse> getResellerV6ProductsearchWithHttpInfo(String imCustomerNumber, String imCorrelationID, String imCountryCode, Integer pageNumber, Integer pageSize, String imSenderID, String type, String hasDiscounts, List<String> vendor, List<String> vendorPartNumber, String acceptLanguage, String vendorNumber, List<String> keyword, String category, String skipAuthorisation, String groupName, GetResellerV6ProductsearchPlanIDParameter planID, Boolean showGroupInfo) throws ApiException {
        okhttp3.Call localVarCall = getResellerV6ProductsearchValidateBeforeCall(imCustomerNumber, imCorrelationID, imCountryCode, pageNumber, pageSize, imSenderID, type, hasDiscounts, vendor, vendorPartNumber, acceptLanguage, vendorNumber, keyword, category, skipAuthorisation, groupName, planID, showGroupInfo, null);
        Type localVarReturnType = new TypeToken<ProductSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Products (asynchronously)
     * Search the Ingram Micro product catalog by providing any of the information in the keyword(Ingram part number / vendor part number/ product description / UPC
     * @param imCustomerNumber Your unique Ingram Micro customer number (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param pageNumber Current page number. Default is 1 (optional)
     * @param pageSize Number of records required in the call - max records 100 per page (optional)
     * @param imSenderID Sender Identification text (optional)
     * @param type The SKU type of product. One of Physical, Digital, or Any. (optional)
     * @param hasDiscounts Specifies if there are discounts available for the product. (optional)
     * @param vendor The name of the vendor/manufacturer of the product. (optional)
     * @param vendorPartNumber The vendors part number for the product. (optional)
     * @param acceptLanguage Header to the API calls, the content will help us identify the response language. (optional, default to en)
     * @param vendorNumber Vendor number of the product (optional)
     * @param keyword Keyword search,can be ingram part number or vendor part number or product title or vendor nameKeyword search. Can be Ingram Micro part number, vender part number, product title, or vendor name. (optional)
     * @param category The category of the product. Example: Displays. (optional)
     * @param skipAuthorisation This parameter is True when you want Skip the authorization, so template will work like current B2b template. (optional)
     * @param groupName Name of the Product Group (optional)
     * @param planID ID of the plan (optional)
     * @param showGroupInfo In case of value true, below Group related information will displayed without the plan info. Group Name, Group Description, Number of plans, link in the group. A link will be provided if customer want to see all the plans in that group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a ProductSearchv6ResponseElement to be returned </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
        <tr><td> 404 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Sender Identification text . <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ProductsearchAsync(String imCustomerNumber, String imCorrelationID, String imCountryCode, Integer pageNumber, Integer pageSize, String imSenderID, String type, String hasDiscounts, List<String> vendor, List<String> vendorPartNumber, String acceptLanguage, String vendorNumber, List<String> keyword, String category, String skipAuthorisation, String groupName, GetResellerV6ProductsearchPlanIDParameter planID, Boolean showGroupInfo, final ApiCallback<ProductSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellerV6ProductsearchValidateBeforeCall(imCustomerNumber, imCorrelationID, imCountryCode, pageNumber, pageSize, imSenderID, type, hasDiscounts, vendor, vendorPartNumber, acceptLanguage, vendorNumber, keyword, category, skipAuthorisation, groupName, planID, showGroupInfo, _callback);
        Type localVarReturnType = new TypeToken<ProductSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPriceandavailability
     * @param includeAvailability Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
     * @param includePricing Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param priceAndAvailabilityRequest  (required)
     * @param includeProductAttributes Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPriceandavailabilityCall(Boolean includeAvailability, Boolean includePricing, String imCustomerNumber, String imCountryCode, String imCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, Boolean includeProductAttributes, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = priceAndAvailabilityRequest;

        // create path and map variables
        String localVarPath = "/resellers/v6/catalog/priceandavailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAvailability", includeAvailability));
        }

        if (includePricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePricing", includePricing));
        }

        if (includeProductAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeProductAttributes", includeProductAttributes));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPriceandavailabilityValidateBeforeCall(Boolean includeAvailability, Boolean includePricing, String imCustomerNumber, String imCountryCode, String imCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, Boolean includeProductAttributes, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'includeAvailability' is set
        if (includeAvailability == null) {
            throw new ApiException("Missing the required parameter 'includeAvailability' when calling postPriceandavailability(Async)");
        }

        // verify the required parameter 'includePricing' is set
        if (includePricing == null) {
            throw new ApiException("Missing the required parameter 'includePricing' when calling postPriceandavailability(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling postPriceandavailability(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling postPriceandavailability(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling postPriceandavailability(Async)");
        }

        // verify the required parameter 'priceAndAvailabilityRequest' is set
        if (priceAndAvailabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'priceAndAvailabilityRequest' when calling postPriceandavailability(Async)");
        }

        return postPriceandavailabilityCall(includeAvailability, includePricing, imCustomerNumber, imCountryCode, imCorrelationID, priceAndAvailabilityRequest, includeProductAttributes, imSenderID, _callback);

    }

    /**
     * Price and Availability
     * The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
     * @param includeAvailability Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
     * @param includePricing Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param priceAndAvailabilityRequest  (required)
     * @param includeProductAttributes Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return List&lt;PriceAndAvailabilityResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PriceAndAvailabilityResponseInner> postPriceandavailability(Boolean includeAvailability, Boolean includePricing, String imCustomerNumber, String imCountryCode, String imCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, Boolean includeProductAttributes, String imSenderID) throws ApiException {
        ApiResponse<List<PriceAndAvailabilityResponseInner>> localVarResp = postPriceandavailabilityWithHttpInfo(includeAvailability, includePricing, imCustomerNumber, imCountryCode, imCorrelationID, priceAndAvailabilityRequest, includeProductAttributes, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Price and Availability
     * The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
     * @param includeAvailability Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
     * @param includePricing Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param priceAndAvailabilityRequest  (required)
     * @param includeProductAttributes Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return ApiResponse&lt;List&lt;PriceAndAvailabilityResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PriceAndAvailabilityResponseInner>> postPriceandavailabilityWithHttpInfo(Boolean includeAvailability, Boolean includePricing, String imCustomerNumber, String imCountryCode, String imCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, Boolean includeProductAttributes, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = postPriceandavailabilityValidateBeforeCall(includeAvailability, includePricing, imCustomerNumber, imCountryCode, imCorrelationID, priceAndAvailabilityRequest, includeProductAttributes, imSenderID, null);
        Type localVarReturnType = new TypeToken<List<PriceAndAvailabilityResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price and Availability (asynchronously)
     * The PriceAndAvailability API, will retrieve Pricing, Availability, discounts, Inventory Location, Reserve Inventory for the products upto 50 products. 
     * @param includeAvailability Pass boolean value as input, if true the response will contain warehouse availability details, if false the response will not hold warehouse availability details (required)
     * @param includePricing Pass boolean value as input, if true the response will contain Pricing details of the Product, if false the response will not hold Pricing details. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param priceAndAvailabilityRequest  (required)
     * @param includeProductAttributes Pass boolean value as input, if true the response will contain detailed attributes related to the Product, if false or not sent the response will contain very few Product details. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPriceandavailabilityAsync(Boolean includeAvailability, Boolean includePricing, String imCustomerNumber, String imCountryCode, String imCorrelationID, PriceAndAvailabilityRequest priceAndAvailabilityRequest, Boolean includeProductAttributes, String imSenderID, final ApiCallback<List<PriceAndAvailabilityResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPriceandavailabilityValidateBeforeCall(includeAvailability, includePricing, imCustomerNumber, imCountryCode, imCorrelationID, priceAndAvailabilityRequest, includeProductAttributes, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<List<PriceAndAvailabilityResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
