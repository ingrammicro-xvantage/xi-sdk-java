/*
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.api;

import xiresellers.client.ApiCallback;
import xiresellers.client.ApiClient;
import xiresellers.client.ApiException;
import xiresellers.client.ApiResponse;
import xiresellers.client.Configuration;
import xiresellers.client.Pair;
import xiresellers.client.ProgressRequestBody;
import xiresellers.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xiresellers.client.model.GetResellerV6ValidateQuote500Response;
import xiresellers.client.model.PostRenewalssearch400Response;
import xiresellers.client.model.RenewalsDetailsResponse;
import xiresellers.client.model.RenewalsSearchRequest;
import xiresellers.client.model.RenewalsSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenewalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RenewalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenewalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getResellersV6Renewalsdetails
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param renewalId Unique Ingram renewal ID. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellersV6RenewalsdetailsCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String renewalId, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/renewals/{renewalId}"
            .replace("{" + "renewalId" + "}", localVarApiClient.escapeString(renewalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellersV6RenewalsdetailsValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String renewalId, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellersV6Renewalsdetails(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellersV6Renewalsdetails(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellersV6Renewalsdetails(Async)");
        }

        // verify the required parameter 'renewalId' is set
        if (renewalId == null) {
            throw new ApiException("Missing the required parameter 'renewalId' when calling getResellersV6Renewalsdetails(Async)");
        }

        return getResellersV6RenewalsdetailsCall(imCustomerNumber, imCountryCode, imCorrelationID, renewalId, imSenderID, _callback);

    }

    /**
     * Renewals Details
     * The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param renewalId Unique Ingram renewal ID. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return RenewalsDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RenewalsDetailsResponse getResellersV6Renewalsdetails(String imCustomerNumber, String imCountryCode, String imCorrelationID, String renewalId, String imSenderID) throws ApiException {
        ApiResponse<RenewalsDetailsResponse> localVarResp = getResellersV6RenewalsdetailsWithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, renewalId, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Renewals Details
     * The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param renewalId Unique Ingram renewal ID. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return ApiResponse&lt;RenewalsDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenewalsDetailsResponse> getResellersV6RenewalsdetailsWithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, String renewalId, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = getResellersV6RenewalsdetailsValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, renewalId, imSenderID, null);
        Type localVarReturnType = new TypeToken<RenewalsDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renewals Details (asynchronously)
     * The Renewal Details API endpoint will retrieve all the details related to the renewal. The customer is required to pass renewalId as a path parameter while sending a request.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param renewalId Unique Ingram renewal ID. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellersV6RenewalsdetailsAsync(String imCustomerNumber, String imCountryCode, String imCorrelationID, String renewalId, String imSenderID, final ApiCallback<RenewalsDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellersV6RenewalsdetailsValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, renewalId, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<RenewalsDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postRenewalssearch
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber The reseller&#39;s unique PO/Order number. (optional)
     * @param ingramPurchaseOrderNumber Sales order number. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param page Number of page. (optional)
     * @param size The submitted pagesize, default is 25. (optional)
     * @param sort Refers to the column selected to apply the sorting criteria. (optional)
     * @param renewalsSearchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRenewalssearchCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String customerOrderNumber, String ingramPurchaseOrderNumber, String serialNumber, String page, String size, String sort, RenewalsSearchRequest renewalsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewalsSearchRequest;

        // create path and map variables
        String localVarPath = "/resellers/v6/renewals/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerOrderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerOrderNumber", customerOrderNumber));
        }

        if (ingramPurchaseOrderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingramPurchaseOrderNumber", ingramPurchaseOrderNumber));
        }

        if (serialNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serialNumber", serialNumber));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postRenewalssearchValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String customerOrderNumber, String ingramPurchaseOrderNumber, String serialNumber, String page, String size, String sort, RenewalsSearchRequest renewalsSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling postRenewalssearch(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling postRenewalssearch(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling postRenewalssearch(Async)");
        }

        return postRenewalssearchCall(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, customerOrderNumber, ingramPurchaseOrderNumber, serialNumber, page, size, sort, renewalsSearchRequest, _callback);

    }

    /**
     * Renewals Search
     * The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber The reseller&#39;s unique PO/Order number. (optional)
     * @param ingramPurchaseOrderNumber Sales order number. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param page Number of page. (optional)
     * @param size The submitted pagesize, default is 25. (optional)
     * @param sort Refers to the column selected to apply the sorting criteria. (optional)
     * @param renewalsSearchRequest  (optional)
     * @return RenewalsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RenewalsSearchResponse postRenewalssearch(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String customerOrderNumber, String ingramPurchaseOrderNumber, String serialNumber, String page, String size, String sort, RenewalsSearchRequest renewalsSearchRequest) throws ApiException {
        ApiResponse<RenewalsSearchResponse> localVarResp = postRenewalssearchWithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, customerOrderNumber, ingramPurchaseOrderNumber, serialNumber, page, size, sort, renewalsSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Renewals Search
     * The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber The reseller&#39;s unique PO/Order number. (optional)
     * @param ingramPurchaseOrderNumber Sales order number. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param page Number of page. (optional)
     * @param size The submitted pagesize, default is 25. (optional)
     * @param sort Refers to the column selected to apply the sorting criteria. (optional)
     * @param renewalsSearchRequest  (optional)
     * @return ApiResponse&lt;RenewalsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenewalsSearchResponse> postRenewalssearchWithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String customerOrderNumber, String ingramPurchaseOrderNumber, String serialNumber, String page, String size, String sort, RenewalsSearchRequest renewalsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = postRenewalssearchValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, customerOrderNumber, ingramPurchaseOrderNumber, serialNumber, page, size, sort, renewalsSearchRequest, null);
        Type localVarReturnType = new TypeToken<RenewalsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renewals Search (asynchronously)
     * The Renewal Search API, by default, will retrieve all the renewals that are associated with the customer’s account. The customer will be able to search for renewals via basic search or advanced search. Basic search is available thru the query string parameters, whereas the advanced search is available thru the request body schema. 
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber The reseller&#39;s unique PO/Order number. (optional)
     * @param ingramPurchaseOrderNumber Sales order number. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param page Number of page. (optional)
     * @param size The submitted pagesize, default is 25. (optional)
     * @param sort Refers to the column selected to apply the sorting criteria. (optional)
     * @param renewalsSearchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRenewalssearchAsync(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, String customerOrderNumber, String ingramPurchaseOrderNumber, String serialNumber, String page, String size, String sort, RenewalsSearchRequest renewalsSearchRequest, final ApiCallback<RenewalsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postRenewalssearchValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, customerOrderNumber, ingramPurchaseOrderNumber, serialNumber, page, size, sort, renewalsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<RenewalsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
