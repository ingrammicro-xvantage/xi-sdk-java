/*
 * XI Sdk Resellers
 * For Resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.api;

import xiresellers.client.ApiCallback;
import xiresellers.client.ApiClient;
import xiresellers.client.ApiException;
import xiresellers.client.ApiResponse;
import xiresellers.client.Configuration;
import xiresellers.client.Pair;
import xiresellers.client.ProgressRequestBody;
import xiresellers.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xiresellers.client.model.ErrorResponse;
import xiresellers.client.model.GetResellerV6ValidateQuote400Response;
import xiresellers.client.model.PostCreateorderV7500Response;
import xiresellers.client.model.QuoteDetailsResponse;
import xiresellers.client.model.QuoteSearchResponse;
import xiresellers.client.model.ValidateQuoteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getQuotessearchV6
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param ingramOrderDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param quoteNumber Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)
     * @param specialBidNumber Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)
     * @param endUserContact End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)
     * @param sortingOrder Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)
     * @param sortBy Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)
     * @param pageSize Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)
     * @param pageNumber Page index or page number for the list of quotes being returned. (optional, default to 1)
     * @param vendorName The name of the vendor. (optional)
     * @param quoteName The quote name was given by the customer while creating quote. (optional)
     * @param status The status of the quote. (optional)
     * @param quoteCreateDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getQuotessearchV6Call(String imCustomerNumber, String imCountryCode, String imCustomerContact, String imCorrelationID, List<String> ingramOrderDateBt, String quoteNumber, String specialBidNumber, String endUserContact, String sortingOrder, String sortBy, Integer pageSize, Integer pageNumber, String vendorName, String quoteName, String status, String quoteCreateDateBt, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/quotes/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingramOrderDateBt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ingramOrderDate-bt", ingramOrderDateBt));
        }

        if (quoteNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteNumber", quoteNumber));
        }

        if (specialBidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specialBidNumber", specialBidNumber));
        }

        if (endUserContact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endUserContact", endUserContact));
        }

        if (sortingOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortingOrder", sortingOrder));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (quoteName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteName", quoteName));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (quoteCreateDateBt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteCreateDate-bt", quoteCreateDateBt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }


        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }


        if (imCustomerContact != null) {
            localVarHeaderParams.put("IM-CustomerContact", localVarApiClient.parameterToString(imCustomerContact));
        }


        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }


        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }


        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuotessearchV6ValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCustomerContact, String imCorrelationID, List<String> ingramOrderDateBt, String quoteNumber, String specialBidNumber, String endUserContact, String sortingOrder, String sortBy, Integer pageSize, Integer pageNumber, String vendorName, String quoteName, String status, String quoteCreateDateBt, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getQuotessearchV6(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getQuotessearchV6(Async)");
        }

        // verify the required parameter 'imCustomerContact' is set
        if (imCustomerContact == null) {
            throw new ApiException("Missing the required parameter 'imCustomerContact' when calling getQuotessearchV6(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getQuotessearchV6(Async)");
        }

        return getQuotessearchV6Call(imCustomerNumber, imCountryCode, imCustomerContact, imCorrelationID, ingramOrderDateBt, quoteNumber, specialBidNumber, endUserContact, sortingOrder, sortBy, pageSize, pageNumber, vendorName, quoteName, status, quoteCreateDateBt, imSenderID, _callback);

    }

    /**
     * Quote Search
     * The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param ingramOrderDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param quoteNumber Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)
     * @param specialBidNumber Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)
     * @param endUserContact End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)
     * @param sortingOrder Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)
     * @param sortBy Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)
     * @param pageSize Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)
     * @param pageNumber Page index or page number for the list of quotes being returned. (optional, default to 1)
     * @param vendorName The name of the vendor. (optional)
     * @param quoteName The quote name was given by the customer while creating quote. (optional)
     * @param status The status of the quote. (optional)
     * @param quoteCreateDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return QuoteSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public QuoteSearchResponse getQuotessearchV6(String imCustomerNumber, String imCountryCode, String imCustomerContact, String imCorrelationID, List<String> ingramOrderDateBt, String quoteNumber, String specialBidNumber, String endUserContact, String sortingOrder, String sortBy, Integer pageSize, Integer pageNumber, String vendorName, String quoteName, String status, String quoteCreateDateBt, String imSenderID) throws ApiException {
        ApiResponse<QuoteSearchResponse> localVarResp = getQuotessearchV6WithHttpInfo(imCustomerNumber, imCountryCode, imCustomerContact, imCorrelationID, ingramOrderDateBt, quoteNumber, specialBidNumber, endUserContact, sortingOrder, sortBy, pageSize, pageNumber, vendorName, quoteName, status, quoteCreateDateBt, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Quote Search
     * The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param ingramOrderDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param quoteNumber Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)
     * @param specialBidNumber Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)
     * @param endUserContact End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)
     * @param sortingOrder Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)
     * @param sortBy Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)
     * @param pageSize Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)
     * @param pageNumber Page index or page number for the list of quotes being returned. (optional, default to 1)
     * @param vendorName The name of the vendor. (optional)
     * @param quoteName The quote name was given by the customer while creating quote. (optional)
     * @param status The status of the quote. (optional)
     * @param quoteCreateDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return ApiResponse&lt;QuoteSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public ApiResponse<QuoteSearchResponse> getQuotessearchV6WithHttpInfo(String imCustomerNumber, String imCountryCode, String imCustomerContact, String imCorrelationID, List<String> ingramOrderDateBt, String quoteNumber, String specialBidNumber, String endUserContact, String sortingOrder, String sortBy, Integer pageSize, Integer pageNumber, String vendorName, String quoteName, String status, String quoteCreateDateBt, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = getQuotessearchV6ValidateBeforeCall(imCustomerNumber, imCountryCode, imCustomerContact, imCorrelationID, ingramOrderDateBt, quoteNumber, specialBidNumber, endUserContact, sortingOrder, sortBy, pageSize, pageNumber, vendorName, quoteName, status, quoteCreateDateBt, imSenderID, null);
        Type localVarReturnType = new TypeToken<QuoteSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Quote Search (asynchronously)
     * The Quote Search API, by default, will retrieve quotes modified or created within the last 30 days. Quotes older than 365 days are excluded by default. The date filters enable the retrieval of quotes older than 30 days and up to 365 days when using date range criteria. The Quote Search API enables the retrieval and filtering of relevant quote list key criteria data such as Quote Number, Special Bid Numbers, End User Name, Quote Status, and Date Ranges from Ingram Micros CRM system. Only Active quotes are avaiable through the API.  Draft and Closed quotes are excluded and are not accessable through the Quote List Search API.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param ingramOrderDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param quoteNumber Unique identifier generated by Ingram Micros CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (optional)
     * @param specialBidNumber Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts. (optional)
     * @param endUserContact End User Name is the end customer name that is associated with a quote in Ingram Micros CRM. (optional)
     * @param sortingOrder Sort applies to the selected column (sortingColumnName) and may be specified in  Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first. (optional)
     * @param sortBy Refers to the column selected to apply the sorting criteria.  The default column is dateCreated and will sort by the most recently created quote first with the following in descending order.  The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate and expiryDate. (optional)
     * @param pageSize Number of records (quotes) to display per page in the quote list.  The default is 25, but may be decreased using the filter . (optional)
     * @param pageNumber Page index or page number for the list of quotes being returned. (optional, default to 1)
     * @param vendorName The name of the vendor. (optional)
     * @param quoteName The quote name was given by the customer while creating quote. (optional)
     * @param status The status of the quote. (optional)
     * @param quoteCreateDateBt Search with start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getQuotessearchV6Async(String imCustomerNumber, String imCountryCode, String imCustomerContact, String imCorrelationID, List<String> ingramOrderDateBt, String quoteNumber, String specialBidNumber, String endUserContact, String sortingOrder, String sortBy, Integer pageSize, Integer pageNumber, String vendorName, String quoteName, String status, String quoteCreateDateBt, String imSenderID, final ApiCallback<QuoteSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuotessearchV6ValidateBeforeCall(imCustomerNumber, imCountryCode, imCustomerContact, imCorrelationID, ingramOrderDateBt, quoteNumber, specialBidNumber, endUserContact, sortingOrder, sortBy, pageSize, pageNumber, vendorName, quoteName, status, quoteCreateDateBt, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<QuoteSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResellerV6ValidateQuote
     * @param quoteNumber A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. (required)
     * @param imCustomerNumber Your Ingram Micro unique customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ValidateQuoteCall(String quoteNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/q2o/validatequote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteNumber", quoteNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }


        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }


        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }


        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }


        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellerV6ValidateQuoteValidateBeforeCall(String quoteNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteNumber' is set
        if (quoteNumber == null) {
            throw new ApiException("Missing the required parameter 'quoteNumber' when calling getResellerV6ValidateQuote(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellerV6ValidateQuote(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellerV6ValidateQuote(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellerV6ValidateQuote(Async)");
        }

        return getResellerV6ValidateQuoteCall(quoteNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, _callback);

    }

    /**
     * Validate Quote
     * The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
     * @param quoteNumber A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. (required)
     * @param imCustomerNumber Your Ingram Micro unique customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @return ValidateQuoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ValidateQuoteResponse getResellerV6ValidateQuote(String quoteNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID) throws ApiException {
        ApiResponse<ValidateQuoteResponse> localVarResp = getResellerV6ValidateQuoteWithHttpInfo(quoteNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Validate Quote
     * The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
     * @param quoteNumber A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. (required)
     * @param imCustomerNumber Your Ingram Micro unique customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @return ApiResponse&lt;ValidateQuoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateQuoteResponse> getResellerV6ValidateQuoteWithHttpInfo(String quoteNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = getResellerV6ValidateQuoteValidateBeforeCall(quoteNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, null);
        Type localVarReturnType = new TypeToken<ValidateQuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate Quote (asynchronously)
     * The validate quote helps the customer validate the quote created in Ingram Micro&#39;s system. Apart from validating the quote, the endpoint also identifies all the mandatory fields that are required by the vendor at the header and line levels.
     * @param quoteNumber A unique identifier generated by Ingram Micro&#39;s CRM specific to each quote. (required)
     * @param imCustomerNumber Your Ingram Micro unique customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellerV6ValidateQuoteAsync(String quoteNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, final ApiCallback<ValidateQuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellerV6ValidateQuoteValidateBeforeCall(quoteNumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<ValidateQuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResellersV6Quotes
     * @param imCustomerNumber Your Ingram Micro unique customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param quoteNumber Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellersV6QuotesCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String quoteNumber, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/quotes/{quoteNumber}"
            .replace("{" + "quoteNumber" + "}", localVarApiClient.escapeString(quoteNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }


        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }


        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }


        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }


        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellersV6QuotesValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String quoteNumber, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellersV6Quotes(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellersV6Quotes(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellersV6Quotes(Async)");
        }

        // verify the required parameter 'quoteNumber' is set
        if (quoteNumber == null) {
            throw new ApiException("Missing the required parameter 'quoteNumber' when calling getResellersV6Quotes(Async)");
        }

        return getResellersV6QuotesCall(imCustomerNumber, imCountryCode, imCorrelationID, quoteNumber, imSenderID, _callback);

    }

    /**
     * Get Quote Details
     * The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
     * @param imCustomerNumber Your Ingram Micro unique customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param quoteNumber Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @return QuoteDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDetailsResponse getResellersV6Quotes(String imCustomerNumber, String imCountryCode, String imCorrelationID, String quoteNumber, String imSenderID) throws ApiException {
        ApiResponse<QuoteDetailsResponse> localVarResp = getResellersV6QuotesWithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, quoteNumber, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Get Quote Details
     * The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
     * @param imCustomerNumber Your Ingram Micro unique customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param quoteNumber Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @return ApiResponse&lt;QuoteDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDetailsResponse> getResellersV6QuotesWithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, String quoteNumber, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = getResellersV6QuotesValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, quoteNumber, imSenderID, null);
        Type localVarReturnType = new TypeToken<QuoteDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote Details (asynchronously)
     * The quote details API provides all quote details associated with the quote number provided.  The **“quoteNumber”**, **“isoCountryCode”** and **“customerNumber”** parameters are required. 
     * @param imCustomerNumber Your Ingram Micro unique customer number (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param quoteNumber Unique identifier generated by Ingram Micro&#39;s CRM specific to each quote.  When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes. (required)
     * @param imSenderID Unique identifier used to identify the third party source accessing the services. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellersV6QuotesAsync(String imCustomerNumber, String imCountryCode, String imCorrelationID, String quoteNumber, String imSenderID, final ApiCallback<QuoteDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellersV6QuotesValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, quoteNumber, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<QuoteDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
