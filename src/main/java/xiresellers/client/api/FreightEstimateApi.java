/*
 * XI Sdk Resellers
 * For resellers seeking to innovate with Ingram Micro's API solutions, automate your eCommerce experience with our array of API's and webhooks to craft a seamless journey for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.api;

import xiresellers.client.ApiCallback;
import xiresellers.client.ApiClient;
import xiresellers.client.ApiException;
import xiresellers.client.ApiResponse;
import xiresellers.client.Configuration;
import xiresellers.client.Pair;
import xiresellers.client.ProgressRequestBody;
import xiresellers.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xiresellers.client.model.FreightRequest;
import xiresellers.client.model.FreightResponse;
import xiresellers.client.model.PostAsyncOrderCreateV7500Response;
import xiresellers.client.model.PostRenewalssearch400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FreightEstimateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FreightEstimateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FreightEstimateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postFreightestimate
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. (optional)
     * @param freightRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFreightestimateCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imCustomerContact, String imSenderID, FreightRequest freightRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = freightRequest;

        // create path and map variables
        String localVarPath = "/resellers/v6/freightestimate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imCustomerContact != null) {
            localVarHeaderParams.put("IM-CustomerContact", localVarApiClient.parameterToString(imCustomerContact));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFreightestimateValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imCustomerContact, String imSenderID, FreightRequest freightRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling postFreightestimate(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling postFreightestimate(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling postFreightestimate(Async)");
        }

        // verify the required parameter 'imCustomerContact' is set
        if (imCustomerContact == null) {
            throw new ApiException("Missing the required parameter 'imCustomerContact' when calling postFreightestimate(Async)");
        }

        return postFreightestimateCall(imCustomerNumber, imCountryCode, imCorrelationID, imCustomerContact, imSenderID, freightRequest, _callback);

    }

    /**
     * Freight Estimate
     * The freight estimator endpoint will allow customers to understand the freight cost for an order.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. (optional)
     * @param freightRequest  (optional)
     * @return FreightResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public FreightResponse postFreightestimate(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imCustomerContact, String imSenderID, FreightRequest freightRequest) throws ApiException {
        ApiResponse<FreightResponse> localVarResp = postFreightestimateWithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, imCustomerContact, imSenderID, freightRequest);
        return localVarResp.getData();
    }

    /**
     * Freight Estimate
     * The freight estimator endpoint will allow customers to understand the freight cost for an order.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. (optional)
     * @param freightRequest  (optional)
     * @return ApiResponse&lt;FreightResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FreightResponse> postFreightestimateWithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imCustomerContact, String imSenderID, FreightRequest freightRequest) throws ApiException {
        okhttp3.Call localVarCall = postFreightestimateValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, imCustomerContact, imSenderID, freightRequest, null);
        Type localVarReturnType = new TypeToken<FreightResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Freight Estimate (asynchronously)
     * The freight estimator endpoint will allow customers to understand the freight cost for an order.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imCustomerContact Logged in Users email address contact. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. (optional)
     * @param freightRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFreightestimateAsync(String imCustomerNumber, String imCountryCode, String imCorrelationID, String imCustomerContact, String imSenderID, FreightRequest freightRequest, final ApiCallback<FreightResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFreightestimateValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, imCustomerContact, imSenderID, freightRequest, _callback);
        Type localVarReturnType = new TypeToken<FreightResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
