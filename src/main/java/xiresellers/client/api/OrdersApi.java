/*
 * XI Sdk Resellers
 * For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package xiresellers.client.api;

import xiresellers.client.ApiCallback;
import xiresellers.client.ApiClient;
import xiresellers.client.ApiException;
import xiresellers.client.ApiResponse;
import xiresellers.client.Configuration;
import xiresellers.client.Pair;
import xiresellers.client.ProgressRequestBody;
import xiresellers.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import xiresellers.client.model.ErrorResponse;
import xiresellers.client.model.ErrorResponseDTO;
import java.time.LocalDate;
import xiresellers.client.model.OrderCreateRequest;
import xiresellers.client.model.OrderCreateResponse;
import xiresellers.client.model.OrderDetailB2B;
import xiresellers.client.model.OrderModifyRequest;
import xiresellers.client.model.OrderModifyResponse;
import xiresellers.client.model.OrderSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteOrdercancel
     * @param orderNumber Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrdercancelCall(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String regionCode, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/orders/{OrderNumber}"
            .replace("{" + "OrderNumber" + "}", localVarApiClient.escapeString(orderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrdercancelValidateBeforeCall(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String regionCode, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderNumber' is set
        if (orderNumber == null) {
            throw new ApiException("Missing the required parameter 'orderNumber' when calling deleteOrdercancel(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling deleteOrdercancel(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling deleteOrdercancel(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling deleteOrdercancel(Async)");
        }

        return deleteOrdercancelCall(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, regionCode, imSenderID, _callback);

    }

    /**
     * Cancel your Order
     * This call must be submitted before the order is released to Ingram Microâ€™s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
     * @param orderNumber Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public void deleteOrdercancel(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String regionCode, String imSenderID) throws ApiException {
        deleteOrdercancelWithHttpInfo(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, regionCode, imSenderID);
    }

    /**
     * Cancel your Order
     * This call must be submitted before the order is released to Ingram Microâ€™s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
     * @param orderNumber Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrdercancelWithHttpInfo(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String regionCode, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = deleteOrdercancelValidateBeforeCall(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, regionCode, imSenderID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel your Order (asynchronously)
     * This call must be submitted before the order is released to Ingram Microâ€™s warehouse. The order cannot be canceled once it is released to the warehouse. Order should be on customer hold to delete any order from Ingram system.
     * @param orderNumber Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrdercancelAsync(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String regionCode, String imSenderID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrdercancelValidateBeforeCall(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, regionCode, imSenderID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderdetailsV61
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderdetailsV61Call(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6.1/orders/{ordernumber}"
            .replace("{" + "ordernumber" + "}", localVarApiClient.escapeString(ordernumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingramOrderDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingramOrderDate", ingramOrderDate));
        }

        if (vendorNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorNumber", vendorNumber));
        }

        if (simulateStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simulateStatus", simulateStatus));
        }

        if (isIml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isIml", isIml));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderdetailsV61ValidateBeforeCall(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ordernumber' is set
        if (ordernumber == null) {
            throw new ApiException("Missing the required parameter 'ordernumber' when calling getOrderdetailsV61(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getOrderdetailsV61(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getOrderdetailsV61(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getOrderdetailsV61(Async)");
        }

        return getOrderdetailsV61Call(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, _callback);

    }

    /**
     * Get Order Details v6.1
     * The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @return OrderDetailB2B
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrderDetailB2B getOrderdetailsV61(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode) throws ApiException {
        ApiResponse<OrderDetailB2B> localVarResp = getOrderdetailsV61WithHttpInfo(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode);
        return localVarResp.getData();
    }

    /**
     * Get Order Details v6.1
     * The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @return ApiResponse&lt;OrderDetailB2B&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDetailB2B> getOrderdetailsV61WithHttpInfo(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode) throws ApiException {
        okhttp3.Call localVarCall = getOrderdetailsV61ValidateBeforeCall(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, null);
        Type localVarReturnType = new TypeToken<OrderDetailB2B>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Details v6.1 (asynchronously)
     * The Orders details API endpoint allows a customer to retrieve their Ingram Micro orders details by using the Ingram Micro sales order number as a path parameter. The sales order number, IM-CustomerNumber, IM-CountryCode, and IM-CorrelationID are required parameters.&lt;br&gt;&lt;br&gt;*Service contracts, subscriptions, and license information are unavailable at the moment, this information will be available in the future. &lt;br&gt;&lt;br&gt; Recent bug fixes:   - Fixed duplication of serial numbers in the API response.   - Fixed API time-out issues   - Fixed missing tracking information.   - Implemented enhanced order status.  
     * @param ordernumber The Ingram Micro sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany. (optional)
     * @param ingramOrderDate The date and time in UTC format that the order was created. (optional)
     * @param vendorNumber Vendor Number. (optional)
     * @param simulateStatus Order response for various order statuses. Not for use in production. (optional)
     * @param isIml True/False only for IML customers. (optional)
     * @param regionCode Region code for sandbox testing - Not for use in production. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderdetailsV61Async(String ordernumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imSenderID, LocalDate ingramOrderDate, String vendorNumber, String simulateStatus, Boolean isIml, String regionCode, final ApiCallback<OrderDetailB2B> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderdetailsV61ValidateBeforeCall(ordernumber, imCustomerNumber, imCountryCode, imCorrelationID, imSenderID, ingramOrderDate, vendorNumber, simulateStatus, isIml, regionCode, _callback);
        Type localVarReturnType = new TypeToken<OrderDetailB2B>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResellersV6Ordersearch
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param ingramOrderNumber The Ingram Micro order number. (optional)
     * @param orderStatus Ingram Micro order status. (optional)
     * @param orderStatusIn Ingram Micro order status(can use it for multiple entries). (optional)
     * @param ingramOrderDate Search by Order date(yyyy-MM-dd). (optional)
     * @param ingramOrderDateBt Search with the start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber Search using your PO/Order number. (optional)
     * @param pageSize The number of records required in the call - max records 100 per page. (optional)
     * @param pageNumber The page number reference. (optional)
     * @param endCustomerOrderNumber End customer/user purchase order number. (optional)
     * @param invoiceDateBt Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)
     * @param shipDateBt Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)
     * @param deliveryDateBt The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)
     * @param ingramPartNumber Ingram Micro unique part number for the product. (optional)
     * @param vendorPartNumber Vendorâ€™s part number for the product. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param trackingNumber The tracking number of the order.*Currently, this feature is not available in Australia (optional)
     * @param vendorName Name of the vendor. (optional)
     * @param specialBidNumber The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrderSearch_Response to be returned </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellersV6OrdersearchCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String ingramOrderNumber, String orderStatus, List<String> orderStatusIn, String ingramOrderDate, List<String> ingramOrderDateBt, String imSenderID, String customerOrderNumber, Integer pageSize, Integer pageNumber, String endCustomerOrderNumber, List<String> invoiceDateBt, List<String> shipDateBt, List<String> deliveryDateBt, String ingramPartNumber, String vendorPartNumber, String serialNumber, String trackingNumber, String vendorName, String specialBidNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/orders/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingramOrderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingramOrderNumber", ingramOrderNumber));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderStatus", orderStatus));
        }

        if (orderStatusIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "orderStatus-in", orderStatusIn));
        }

        if (ingramOrderDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingramOrderDate", ingramOrderDate));
        }

        if (ingramOrderDateBt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ingramOrderDate-bt", ingramOrderDateBt));
        }

        if (customerOrderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerOrderNumber", customerOrderNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (endCustomerOrderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endCustomerOrderNumber", endCustomerOrderNumber));
        }

        if (invoiceDateBt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "invoiceDate_bt", invoiceDateBt));
        }

        if (shipDateBt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shipDate_bt", shipDateBt));
        }

        if (deliveryDateBt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deliveryDate_bt", deliveryDateBt));
        }

        if (ingramPartNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingramPartNumber", ingramPartNumber));
        }

        if (vendorPartNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorPartNumber", vendorPartNumber));
        }

        if (serialNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serialNumber", serialNumber));
        }

        if (trackingNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackingNumber", trackingNumber));
        }

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (specialBidNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("specialBidNumber", specialBidNumber));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResellersV6OrdersearchValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, String ingramOrderNumber, String orderStatus, List<String> orderStatusIn, String ingramOrderDate, List<String> ingramOrderDateBt, String imSenderID, String customerOrderNumber, Integer pageSize, Integer pageNumber, String endCustomerOrderNumber, List<String> invoiceDateBt, List<String> shipDateBt, List<String> deliveryDateBt, String ingramPartNumber, String vendorPartNumber, String serialNumber, String trackingNumber, String vendorName, String specialBidNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getResellersV6Ordersearch(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getResellersV6Ordersearch(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getResellersV6Ordersearch(Async)");
        }

        return getResellersV6OrdersearchCall(imCustomerNumber, imCountryCode, imCorrelationID, ingramOrderNumber, orderStatus, orderStatusIn, ingramOrderDate, ingramOrderDateBt, imSenderID, customerOrderNumber, pageSize, pageNumber, endCustomerOrderNumber, invoiceDateBt, shipDateBt, deliveryDateBt, ingramPartNumber, vendorPartNumber, serialNumber, trackingNumber, vendorName, specialBidNumber, _callback);

    }

    /**
     * Search your Orders
     * The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param ingramOrderNumber The Ingram Micro order number. (optional)
     * @param orderStatus Ingram Micro order status. (optional)
     * @param orderStatusIn Ingram Micro order status(can use it for multiple entries). (optional)
     * @param ingramOrderDate Search by Order date(yyyy-MM-dd). (optional)
     * @param ingramOrderDateBt Search with the start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber Search using your PO/Order number. (optional)
     * @param pageSize The number of records required in the call - max records 100 per page. (optional)
     * @param pageNumber The page number reference. (optional)
     * @param endCustomerOrderNumber End customer/user purchase order number. (optional)
     * @param invoiceDateBt Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)
     * @param shipDateBt Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)
     * @param deliveryDateBt The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)
     * @param ingramPartNumber Ingram Micro unique part number for the product. (optional)
     * @param vendorPartNumber Vendorâ€™s part number for the product. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param trackingNumber The tracking number of the order.*Currently, this feature is not available in Australia (optional)
     * @param vendorName Name of the vendor. (optional)
     * @param specialBidNumber The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)
     * @return OrderSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrderSearch_Response to be returned </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrderSearchResponse getResellersV6Ordersearch(String imCustomerNumber, String imCountryCode, String imCorrelationID, String ingramOrderNumber, String orderStatus, List<String> orderStatusIn, String ingramOrderDate, List<String> ingramOrderDateBt, String imSenderID, String customerOrderNumber, Integer pageSize, Integer pageNumber, String endCustomerOrderNumber, List<String> invoiceDateBt, List<String> shipDateBt, List<String> deliveryDateBt, String ingramPartNumber, String vendorPartNumber, String serialNumber, String trackingNumber, String vendorName, String specialBidNumber) throws ApiException {
        ApiResponse<OrderSearchResponse> localVarResp = getResellersV6OrdersearchWithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, ingramOrderNumber, orderStatus, orderStatusIn, ingramOrderDate, ingramOrderDateBt, imSenderID, customerOrderNumber, pageSize, pageNumber, endCustomerOrderNumber, invoiceDateBt, shipDateBt, deliveryDateBt, ingramPartNumber, vendorPartNumber, serialNumber, trackingNumber, vendorName, specialBidNumber);
        return localVarResp.getData();
    }

    /**
     * Search your Orders
     * The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param ingramOrderNumber The Ingram Micro order number. (optional)
     * @param orderStatus Ingram Micro order status. (optional)
     * @param orderStatusIn Ingram Micro order status(can use it for multiple entries). (optional)
     * @param ingramOrderDate Search by Order date(yyyy-MM-dd). (optional)
     * @param ingramOrderDateBt Search with the start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber Search using your PO/Order number. (optional)
     * @param pageSize The number of records required in the call - max records 100 per page. (optional)
     * @param pageNumber The page number reference. (optional)
     * @param endCustomerOrderNumber End customer/user purchase order number. (optional)
     * @param invoiceDateBt Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)
     * @param shipDateBt Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)
     * @param deliveryDateBt The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)
     * @param ingramPartNumber Ingram Micro unique part number for the product. (optional)
     * @param vendorPartNumber Vendorâ€™s part number for the product. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param trackingNumber The tracking number of the order.*Currently, this feature is not available in Australia (optional)
     * @param vendorName Name of the vendor. (optional)
     * @param specialBidNumber The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)
     * @return ApiResponse&lt;OrderSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrderSearch_Response to be returned </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderSearchResponse> getResellersV6OrdersearchWithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, String ingramOrderNumber, String orderStatus, List<String> orderStatusIn, String ingramOrderDate, List<String> ingramOrderDateBt, String imSenderID, String customerOrderNumber, Integer pageSize, Integer pageNumber, String endCustomerOrderNumber, List<String> invoiceDateBt, List<String> shipDateBt, List<String> deliveryDateBt, String ingramPartNumber, String vendorPartNumber, String serialNumber, String trackingNumber, String vendorName, String specialBidNumber) throws ApiException {
        okhttp3.Call localVarCall = getResellersV6OrdersearchValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, ingramOrderNumber, orderStatus, orderStatusIn, ingramOrderDate, ingramOrderDateBt, imSenderID, customerOrderNumber, pageSize, pageNumber, endCustomerOrderNumber, invoiceDateBt, shipDateBt, deliveryDateBt, ingramPartNumber, vendorPartNumber, serialNumber, trackingNumber, vendorName, specialBidNumber, null);
        Type localVarReturnType = new TypeToken<OrderSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search your Orders (asynchronously)
     * The Orders Search API endpoint allows a customer to search their Ingram Micro orders by using any of the available query string parameters, customer can search their order by using single query string parameters or combining them together. This endpoint supports the pagination of results.
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param ingramOrderNumber The Ingram Micro order number. (optional)
     * @param orderStatus Ingram Micro order status. (optional)
     * @param orderStatusIn Ingram Micro order status(can use it for multiple entries). (optional)
     * @param ingramOrderDate Search by Order date(yyyy-MM-dd). (optional)
     * @param ingramOrderDateBt Search with the start and end date(only 2 entries allowed). (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param customerOrderNumber Search using your PO/Order number. (optional)
     * @param pageSize The number of records required in the call - max records 100 per page. (optional)
     * @param pageNumber The page number reference. (optional)
     * @param endCustomerOrderNumber End customer/user purchase order number. (optional)
     * @param invoiceDateBt Invoice date of order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia. (optional)
     * @param shipDateBt Shipment date of order, search with the start and end date(only 2 entries allowed). (optional)
     * @param deliveryDateBt The delivery date of the order, search with the start and end date(only 2 entries allowed).*Currently, this feature is not available in Australia (optional)
     * @param ingramPartNumber Ingram Micro unique part number for the product. (optional)
     * @param vendorPartNumber Vendorâ€™s part number for the product. (optional)
     * @param serialNumber A serial number of the product. (optional)
     * @param trackingNumber The tracking number of the order.*Currently, this feature is not available in Australia (optional)
     * @param vendorName Name of the vendor. (optional)
     * @param specialBidNumber The bid number provided to the reseller by the vendor for special pricing and discounts. Line-level bid numbers take precedence over header-level bid numbers.*Currently, this feature is not available in Australia (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OrderSearch_Response to be returned </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResellersV6OrdersearchAsync(String imCustomerNumber, String imCountryCode, String imCorrelationID, String ingramOrderNumber, String orderStatus, List<String> orderStatusIn, String ingramOrderDate, List<String> ingramOrderDateBt, String imSenderID, String customerOrderNumber, Integer pageSize, Integer pageNumber, String endCustomerOrderNumber, List<String> invoiceDateBt, List<String> shipDateBt, List<String> deliveryDateBt, String ingramPartNumber, String vendorPartNumber, String serialNumber, String trackingNumber, String vendorName, String specialBidNumber, final ApiCallback<OrderSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResellersV6OrdersearchValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, ingramOrderNumber, orderStatus, orderStatusIn, ingramOrderDate, ingramOrderDateBt, imSenderID, customerOrderNumber, pageSize, pageNumber, endCustomerOrderNumber, invoiceDateBt, shipDateBt, deliveryDateBt, ingramPartNumber, vendorPartNumber, serialNumber, trackingNumber, vendorName, specialBidNumber, _callback);
        Type localVarReturnType = new TypeToken<OrderSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCreateorderV6
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param orderCreateRequest  (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postCreateorderV6Call(String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderCreateRequest orderCreateRequest, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderCreateRequest;

        // create path and map variables
        String localVarPath = "/resellers/v6/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCreateorderV6ValidateBeforeCall(String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderCreateRequest orderCreateRequest, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling postCreateorderV6(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling postCreateorderV6(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling postCreateorderV6(Async)");
        }

        // verify the required parameter 'orderCreateRequest' is set
        if (orderCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'orderCreateRequest' when calling postCreateorderV6(Async)");
        }

        return postCreateorderV6Call(imCustomerNumber, imCountryCode, imCorrelationID, orderCreateRequest, imSenderID, _callback);

    }

    /**
     * Create your Order
     * Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param orderCreateRequest  (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return OrderCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public OrderCreateResponse postCreateorderV6(String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderCreateRequest orderCreateRequest, String imSenderID) throws ApiException {
        ApiResponse<OrderCreateResponse> localVarResp = postCreateorderV6WithHttpInfo(imCustomerNumber, imCountryCode, imCorrelationID, orderCreateRequest, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Create your Order
     * Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param orderCreateRequest  (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return ApiResponse&lt;OrderCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public ApiResponse<OrderCreateResponse> postCreateorderV6WithHttpInfo(String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderCreateRequest orderCreateRequest, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = postCreateorderV6ValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, orderCreateRequest, imSenderID, null);
        Type localVarReturnType = new TypeToken<OrderCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create your Order (asynchronously)
     * Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs. IM-CustomerNumber, IM-CountryCode, IM-SenderID and IM-CorrelationID are required parameters. Ingram Micro recommends that you provide the ingrampartnumber for each SKU contained in each order. NOTE: You must have net terms to use the Ingram Micro Order Create API. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering. 
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction accross all the systems. (required)
     * @param orderCreateRequest  (required)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postCreateorderV6Async(String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderCreateRequest orderCreateRequest, String imSenderID, final ApiCallback<OrderCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCreateorderV6ValidateBeforeCall(imCustomerNumber, imCountryCode, imCorrelationID, orderCreateRequest, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<OrderCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrdermodify
     * @param orderNumber Ingram sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param orderModifyRequest  (required)
     * @param actionCode Action code to be used for order release. (optional)
     * @param regionCode Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call putOrdermodifyCall(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderModifyRequest orderModifyRequest, String actionCode, String regionCode, String imSenderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderModifyRequest;

        // create path and map variables
        String localVarPath = "/resellers/v6/orders/{orderNumber}"
            .replace("{" + "orderNumber" + "}", localVarApiClient.escapeString(orderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionCode", actionCode));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imSenderID != null) {
            localVarHeaderParams.put("IM-SenderID", localVarApiClient.parameterToString(imSenderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrdermodifyValidateBeforeCall(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderModifyRequest orderModifyRequest, String actionCode, String regionCode, String imSenderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderNumber' is set
        if (orderNumber == null) {
            throw new ApiException("Missing the required parameter 'orderNumber' when calling putOrdermodify(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling putOrdermodify(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling putOrdermodify(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling putOrdermodify(Async)");
        }

        // verify the required parameter 'orderModifyRequest' is set
        if (orderModifyRequest == null) {
            throw new ApiException("Missing the required parameter 'orderModifyRequest' when calling putOrdermodify(Async)");
        }

        return putOrdermodifyCall(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, orderModifyRequest, actionCode, regionCode, imSenderID, _callback);

    }

    /**
     * Modify your Order
     * The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
     * @param orderNumber Ingram sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param orderModifyRequest  (required)
     * @param actionCode Action code to be used for order release. (optional)
     * @param regionCode Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return OrderModifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public OrderModifyResponse putOrdermodify(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderModifyRequest orderModifyRequest, String actionCode, String regionCode, String imSenderID) throws ApiException {
        ApiResponse<OrderModifyResponse> localVarResp = putOrdermodifyWithHttpInfo(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, orderModifyRequest, actionCode, regionCode, imSenderID);
        return localVarResp.getData();
    }

    /**
     * Modify your Order
     * The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
     * @param orderNumber Ingram sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param orderModifyRequest  (required)
     * @param actionCode Action code to be used for order release. (optional)
     * @param regionCode Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @return ApiResponse&lt;OrderModifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public ApiResponse<OrderModifyResponse> putOrdermodifyWithHttpInfo(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderModifyRequest orderModifyRequest, String actionCode, String regionCode, String imSenderID) throws ApiException {
        okhttp3.Call localVarCall = putOrdermodifyValidateBeforeCall(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, orderModifyRequest, actionCode, regionCode, imSenderID, null);
        Type localVarReturnType = new TypeToken<OrderModifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify your Order (asynchronously)
     * The Order Modify API endpoint allows for changes to be made to an order after the order creation process as long as the order was created with the customer hold flag.  * Orders can be modified within 24hrs of being placed with the customer hold flag, after 24hrs they are voided if they are not released by the customer.  * Modifying orders that were placed without the customer hold flag is not possible 
     * @param orderNumber Ingram sales order number. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param orderModifyRequest  (required)
     * @param actionCode Action code to be used for order release. (optional)
     * @param regionCode Region code paramter to be used only for order release functionality.Region code is only for sandbox not for production (optional)
     * @param imSenderID Unique value used to identify the sender of the transaction. Example: MyCompany (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-SenderID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
     </table>
     */
    public okhttp3.Call putOrdermodifyAsync(String orderNumber, String imCustomerNumber, String imCountryCode, String imCorrelationID, OrderModifyRequest orderModifyRequest, String actionCode, String regionCode, String imSenderID, final ApiCallback<OrderModifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrdermodifyValidateBeforeCall(orderNumber, imCustomerNumber, imCountryCode, imCorrelationID, orderModifyRequest, actionCode, regionCode, imSenderID, _callback);
        Type localVarReturnType = new TypeToken<OrderModifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
