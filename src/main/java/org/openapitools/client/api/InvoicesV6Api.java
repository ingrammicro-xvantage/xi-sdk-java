/*
 * Reseller API Documentation
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.InvoiceDetailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesV6Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesV6Api() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesV6Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getInvoicedetailsV6
     * @param invoicenumber The Ingram Micro invoice number. (required)
     * @param version Version of codebase. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imApplicationID Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
     * @param customerType it should be invoice or order (optional)
     * @param includeSerialNumbers if serial in the response send as true or else false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-ApplicationID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoicedetailsV6Call(String invoicenumber, String version, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imApplicationID, String customerType, Boolean includeSerialNumbers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v6/invoices/{invoicenumber}"
            .replace("{" + "invoicenumber" + "}", localVarApiClient.escapeString(invoicenumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerType", customerType));
        }

        if (includeSerialNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSerialNumbers", includeSerialNumbers));
        }

        if (version != null) {
            localVarHeaderParams.put("version", localVarApiClient.parameterToString(version));
        }

        if (imCustomerNumber != null) {
            localVarHeaderParams.put("IM-CustomerNumber", localVarApiClient.parameterToString(imCustomerNumber));
        }

        if (imCountryCode != null) {
            localVarHeaderParams.put("IM-CountryCode", localVarApiClient.parameterToString(imCountryCode));
        }

        if (imCorrelationID != null) {
            localVarHeaderParams.put("IM-CorrelationID", localVarApiClient.parameterToString(imCorrelationID));
        }

        if (imApplicationID != null) {
            localVarHeaderParams.put("IM-ApplicationID", localVarApiClient.parameterToString(imApplicationID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoicedetailsV6ValidateBeforeCall(String invoicenumber, String version, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imApplicationID, String customerType, Boolean includeSerialNumbers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoicenumber' is set
        if (invoicenumber == null) {
            throw new ApiException("Missing the required parameter 'invoicenumber' when calling getInvoicedetailsV6(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getInvoicedetailsV6(Async)");
        }

        // verify the required parameter 'imCustomerNumber' is set
        if (imCustomerNumber == null) {
            throw new ApiException("Missing the required parameter 'imCustomerNumber' when calling getInvoicedetailsV6(Async)");
        }

        // verify the required parameter 'imCountryCode' is set
        if (imCountryCode == null) {
            throw new ApiException("Missing the required parameter 'imCountryCode' when calling getInvoicedetailsV6(Async)");
        }

        // verify the required parameter 'imCorrelationID' is set
        if (imCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'imCorrelationID' when calling getInvoicedetailsV6(Async)");
        }

        // verify the required parameter 'imApplicationID' is set
        if (imApplicationID == null) {
            throw new ApiException("Missing the required parameter 'imApplicationID' when calling getInvoicedetailsV6(Async)");
        }

        return getInvoicedetailsV6Call(invoicenumber, version, imCustomerNumber, imCountryCode, imCorrelationID, imApplicationID, customerType, includeSerialNumbers, _callback);

    }

    /**
     * Get Invoice Details v6
     * Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
     * @param invoicenumber The Ingram Micro invoice number. (required)
     * @param version Version of codebase. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imApplicationID Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
     * @param customerType it should be invoice or order (optional)
     * @param includeSerialNumbers if serial in the response send as true or else false (optional)
     * @return InvoiceDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-ApplicationID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceDetailResponse getInvoicedetailsV6(String invoicenumber, String version, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imApplicationID, String customerType, Boolean includeSerialNumbers) throws ApiException {
        ApiResponse<InvoiceDetailResponse> localVarResp = getInvoicedetailsV6WithHttpInfo(invoicenumber, version, imCustomerNumber, imCountryCode, imCorrelationID, imApplicationID, customerType, includeSerialNumbers);
        return localVarResp.getData();
    }

    /**
     * Get Invoice Details v6
     * Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
     * @param invoicenumber The Ingram Micro invoice number. (required)
     * @param version Version of codebase. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imApplicationID Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
     * @param customerType it should be invoice or order (optional)
     * @param includeSerialNumbers if serial in the response send as true or else false (optional)
     * @return ApiResponse&lt;InvoiceDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-ApplicationID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceDetailResponse> getInvoicedetailsV6WithHttpInfo(String invoicenumber, String version, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imApplicationID, String customerType, Boolean includeSerialNumbers) throws ApiException {
        okhttp3.Call localVarCall = getInvoicedetailsV6ValidateBeforeCall(invoicenumber, version, imCustomerNumber, imCountryCode, imCorrelationID, imApplicationID, customerType, includeSerialNumbers, null);
        Type localVarReturnType = new TypeToken<InvoiceDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Invoice Details v6 (asynchronously)
     * Use your Ingram Micro invoice number to search for existing invoices or retrieve existing invoice details.  The invoice number, IM-CustomerNumber, IM-CountryCode, IM-ApplicationId and IM-CorrelationID are required parameters.  .
     * @param invoicenumber The Ingram Micro invoice number. (required)
     * @param version Version of codebase. (required)
     * @param imCustomerNumber Your unique Ingram Micro customer number. (required)
     * @param imCountryCode Two-character ISO country code. (required)
     * @param imCorrelationID Unique transaction number to identify each transaction across all the systems. (required)
     * @param imApplicationID Unique value used to identify the sender of the transaction. Example: MyCompany. (required)
     * @param customerType it should be invoice or order (optional)
     * @param includeSerialNumbers if serial in the response send as true or else false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * IM-CorrelationID - Unique transaction number to identify each transaction across all the systems. <br>  * IM-ApplicationID - Unique value used to identify the sender of the transaction. Example: MyCompany <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoicedetailsV6Async(String invoicenumber, String version, String imCustomerNumber, String imCountryCode, String imCorrelationID, String imApplicationID, String customerType, Boolean includeSerialNumbers, final ApiCallback<InvoiceDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoicedetailsV6ValidateBeforeCall(invoicenumber, version, imCustomerNumber, imCountryCode, imCorrelationID, imApplicationID, customerType, includeSerialNumbers, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
