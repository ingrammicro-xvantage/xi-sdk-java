/*
 * Reseller API Documentation
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderCancelResponse;
import org.openapitools.client.model.OrderCreateRequest;
import org.openapitools.client.model.OrderCreateResponse;
import org.openapitools.client.model.OrderDetailResponse;
import org.openapitools.client.model.OrderSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersV5Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersV5Api() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersV5Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteOrdersOrderNumber
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isoCountryCode 2 chars ISO country code (required)
     * @param entryDate Order entry date (yyyy-mm-dd) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrdersOrderNumberCall(String ordernumber, String customerNumber, String isoCountryCode, String entryDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v5/Orders/{ordernumber}"
            .replace("{" + "ordernumber" + "}", localVarApiClient.escapeString(ordernumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerNumber", customerNumber));
        }

        if (isoCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoCountryCode", isoCountryCode));
        }

        if (entryDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entryDate", entryDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrdersOrderNumberValidateBeforeCall(String ordernumber, String customerNumber, String isoCountryCode, String entryDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ordernumber' is set
        if (ordernumber == null) {
            throw new ApiException("Missing the required parameter 'ordernumber' when calling deleteOrdersOrderNumber(Async)");
        }

        // verify the required parameter 'customerNumber' is set
        if (customerNumber == null) {
            throw new ApiException("Missing the required parameter 'customerNumber' when calling deleteOrdersOrderNumber(Async)");
        }

        // verify the required parameter 'isoCountryCode' is set
        if (isoCountryCode == null) {
            throw new ApiException("Missing the required parameter 'isoCountryCode' when calling deleteOrdersOrderNumber(Async)");
        }

        // verify the required parameter 'entryDate' is set
        if (entryDate == null) {
            throw new ApiException("Missing the required parameter 'entryDate' when calling deleteOrdersOrderNumber(Async)");
        }

        return deleteOrdersOrderNumberCall(ordernumber, customerNumber, isoCountryCode, entryDate, _callback);

    }

    /**
     * Cancel an Existing Order
     * This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isoCountryCode 2 chars ISO country code (required)
     * @param entryDate Order entry date (yyyy-mm-dd) (required)
     * @return OrderCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OrderCancelResponse deleteOrdersOrderNumber(String ordernumber, String customerNumber, String isoCountryCode, String entryDate) throws ApiException {
        ApiResponse<OrderCancelResponse> localVarResp = deleteOrdersOrderNumberWithHttpInfo(ordernumber, customerNumber, isoCountryCode, entryDate);
        return localVarResp.getData();
    }

    /**
     * Cancel an Existing Order
     * This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isoCountryCode 2 chars ISO country code (required)
     * @param entryDate Order entry date (yyyy-mm-dd) (required)
     * @return ApiResponse&lt;OrderCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderCancelResponse> deleteOrdersOrderNumberWithHttpInfo(String ordernumber, String customerNumber, String isoCountryCode, String entryDate) throws ApiException {
        okhttp3.Call localVarCall = deleteOrdersOrderNumberValidateBeforeCall(ordernumber, customerNumber, isoCountryCode, entryDate, null);
        Type localVarReturnType = new TypeToken<OrderCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel an Existing Order (asynchronously)
     * This endpoint is a request to cancel a previously accepted order. Use your Ingram Micro sales order number to cancel an order.   The &lt;strong&gt;orderNumber, isoCountryCode, customerNumber&lt;/strong&gt; and &lt;strong&gt;entryDate&lt;/strong&gt; parameters are required.   This call must be submitted &lt;strong&gt;before&lt;/strong&gt; the order is released to Ingram Micro’s warehouse. The order cannot be canceled once it is released to the warehouse.   Direct ship orders cannot be canceled. Contact your Ingram Micro sales rep for assistance.
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isoCountryCode 2 chars ISO country code (required)
     * @param entryDate Order entry date (yyyy-mm-dd) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrdersOrderNumberAsync(String ordernumber, String customerNumber, String isoCountryCode, String entryDate, final ApiCallback<OrderCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrdersOrderNumberValidateBeforeCall(ordernumber, customerNumber, isoCountryCode, entryDate, _callback);
        Type localVarReturnType = new TypeToken<OrderCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrdersSearch
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 char iso country code (required)
     * @param ordernumber Ingram sales order number (optional)
     * @param customerordernumber Search using your PO/Order number (optional)
     * @param orderstatus Ingram Micro order status (optional, default to any)
     * @param startcreatetimestamp Search start date/time in UTC format (optional)
     * @param endcreatetimestamp Search end date/time in UTC format (optional)
     * @param pagesize Number of records required in the call (optional)
     * @param pagenumber the page number reference (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersSearchCall(String customerNumber, String isocountrycode, String ordernumber, String customerordernumber, String orderstatus, OffsetDateTime startcreatetimestamp, OffsetDateTime endcreatetimestamp, Integer pagesize, Integer pagenumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v5/Orders/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerNumber", customerNumber));
        }

        if (isocountrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isocountrycode", isocountrycode));
        }

        if (ordernumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordernumber", ordernumber));
        }

        if (customerordernumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerordernumber", customerordernumber));
        }

        if (orderstatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderstatus", orderstatus));
        }

        if (startcreatetimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startcreatetimestamp", startcreatetimestamp));
        }

        if (endcreatetimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endcreatetimestamp", endcreatetimestamp));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (pagenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagenumber", pagenumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersSearchValidateBeforeCall(String customerNumber, String isocountrycode, String ordernumber, String customerordernumber, String orderstatus, OffsetDateTime startcreatetimestamp, OffsetDateTime endcreatetimestamp, Integer pagesize, Integer pagenumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerNumber' is set
        if (customerNumber == null) {
            throw new ApiException("Missing the required parameter 'customerNumber' when calling getOrdersSearch(Async)");
        }

        // verify the required parameter 'isocountrycode' is set
        if (isocountrycode == null) {
            throw new ApiException("Missing the required parameter 'isocountrycode' when calling getOrdersSearch(Async)");
        }

        return getOrdersSearchCall(customerNumber, isocountrycode, ordernumber, customerordernumber, orderstatus, startcreatetimestamp, endcreatetimestamp, pagesize, pagenumber, _callback);

    }

    /**
     * Search your Orders
     * Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 char iso country code (required)
     * @param ordernumber Ingram sales order number (optional)
     * @param customerordernumber Search using your PO/Order number (optional)
     * @param orderstatus Ingram Micro order status (optional, default to any)
     * @param startcreatetimestamp Search start date/time in UTC format (optional)
     * @param endcreatetimestamp Search end date/time in UTC format (optional)
     * @param pagesize Number of records required in the call (optional)
     * @param pagenumber the page number reference (optional, default to 1)
     * @return OrderSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OrderSearchResponse getOrdersSearch(String customerNumber, String isocountrycode, String ordernumber, String customerordernumber, String orderstatus, OffsetDateTime startcreatetimestamp, OffsetDateTime endcreatetimestamp, Integer pagesize, Integer pagenumber) throws ApiException {
        ApiResponse<OrderSearchResponse> localVarResp = getOrdersSearchWithHttpInfo(customerNumber, isocountrycode, ordernumber, customerordernumber, orderstatus, startcreatetimestamp, endcreatetimestamp, pagesize, pagenumber);
        return localVarResp.getData();
    }

    /**
     * Search your Orders
     * Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 char iso country code (required)
     * @param ordernumber Ingram sales order number (optional)
     * @param customerordernumber Search using your PO/Order number (optional)
     * @param orderstatus Ingram Micro order status (optional, default to any)
     * @param startcreatetimestamp Search start date/time in UTC format (optional)
     * @param endcreatetimestamp Search end date/time in UTC format (optional)
     * @param pagesize Number of records required in the call (optional)
     * @param pagenumber the page number reference (optional, default to 1)
     * @return ApiResponse&lt;OrderSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderSearchResponse> getOrdersSearchWithHttpInfo(String customerNumber, String isocountrycode, String ordernumber, String customerordernumber, String orderstatus, OffsetDateTime startcreatetimestamp, OffsetDateTime endcreatetimestamp, Integer pagesize, Integer pagenumber) throws ApiException {
        okhttp3.Call localVarCall = getOrdersSearchValidateBeforeCall(customerNumber, isocountrycode, ordernumber, customerordernumber, orderstatus, startcreatetimestamp, endcreatetimestamp, pagesize, pagenumber, null);
        Type localVarReturnType = new TypeToken<OrderSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search your Orders (asynchronously)
     * Search your Ingram Micro orders. This endpoint searches by multiple order parameters and supports pagination of results. Search using one or more of the parameters below:   &lt;ul&gt;&lt;li&gt;ordernumber — Ingram Micro sales order number&lt;/li&gt;&lt;li&gt;customerordernumber — The PO or order number provided by you when creating an order&lt;/li&gt;&lt;li&gt;orderstatus — user order status codes for the search, default is set to \&quot;any\&quot;&lt;/li&gt;&lt;li&gt;startcreatetimestamp and endcreatetimestamp — Order create date range&lt;/li&gt;&lt;/ul&gt;   For pagination, please use these parameters:  &lt;ul&gt;&lt;li&gt;pagesize — default 25, max 100&lt;/li&gt;&lt;li&gt;pagenumber — default 1&lt;/li&gt;&lt;/ul&gt;   Order Status Values:  &lt;ul&gt;&lt;li&gt;P – PENDING&lt;/li&gt;&lt;li&gt;R – RELEASED&lt;/li&gt;&lt;li&gt;4 – SHIPPED&lt;/li&gt;&lt;li&gt;I – INVOICED&lt;/li&gt;&lt;li&gt;V – VOIDED&lt;/li&gt;&lt;/ul&gt;   The search endpoint also returns HATEOAS links for order details and invoice details, if applicable.
     * @param customerNumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 char iso country code (required)
     * @param ordernumber Ingram sales order number (optional)
     * @param customerordernumber Search using your PO/Order number (optional)
     * @param orderstatus Ingram Micro order status (optional, default to any)
     * @param startcreatetimestamp Search start date/time in UTC format (optional)
     * @param endcreatetimestamp Search end date/time in UTC format (optional)
     * @param pagesize Number of records required in the call (optional)
     * @param pagenumber the page number reference (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersSearchAsync(String customerNumber, String isocountrycode, String ordernumber, String customerordernumber, String orderstatus, OffsetDateTime startcreatetimestamp, OffsetDateTime endcreatetimestamp, Integer pagesize, Integer pagenumber, final ApiCallback<OrderSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersSearchValidateBeforeCall(customerNumber, isocountrycode, ordernumber, customerordernumber, orderstatus, startcreatetimestamp, endcreatetimestamp, pagesize, pagenumber, _callback);
        Type localVarReturnType = new TypeToken<OrderSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV5OrdersDetails
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customernumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 chars ISO country code (required)
     * @param customerordernumber Your PO/Order Number provide at the time of order creation (optional)
     * @param startcreatetimestamp Filter start date - format YYYY-MM-DD (optional)
     * @param endcreatetimestamp Filter end date - format YYYY-MM-DD (optional)
     * @param simulate Order response for various order statuses. Not for use in production. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV5OrdersDetailsCall(String ordernumber, String customernumber, String isocountrycode, String customerordernumber, LocalDate startcreatetimestamp, String endcreatetimestamp, String simulate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resellers/v5/Orders/{ordernumber}"
            .replace("{" + "ordernumber" + "}", localVarApiClient.escapeString(ordernumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customernumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customernumber", customernumber));
        }

        if (isocountrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isocountrycode", isocountrycode));
        }

        if (customerordernumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerordernumber", customerordernumber));
        }

        if (startcreatetimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startcreatetimestamp", startcreatetimestamp));
        }

        if (endcreatetimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endcreatetimestamp", endcreatetimestamp));
        }

        if (simulate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simulate", simulate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV5OrdersDetailsValidateBeforeCall(String ordernumber, String customernumber, String isocountrycode, String customerordernumber, LocalDate startcreatetimestamp, String endcreatetimestamp, String simulate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ordernumber' is set
        if (ordernumber == null) {
            throw new ApiException("Missing the required parameter 'ordernumber' when calling getV5OrdersDetails(Async)");
        }

        // verify the required parameter 'customernumber' is set
        if (customernumber == null) {
            throw new ApiException("Missing the required parameter 'customernumber' when calling getV5OrdersDetails(Async)");
        }

        // verify the required parameter 'isocountrycode' is set
        if (isocountrycode == null) {
            throw new ApiException("Missing the required parameter 'isocountrycode' when calling getV5OrdersDetails(Async)");
        }

        return getV5OrdersDetailsCall(ordernumber, customernumber, isocountrycode, customerordernumber, startcreatetimestamp, endcreatetimestamp, simulate, _callback);

    }

    /**
     * Get Order Details
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customernumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 chars ISO country code (required)
     * @param customerordernumber Your PO/Order Number provide at the time of order creation (optional)
     * @param startcreatetimestamp Filter start date - format YYYY-MM-DD (optional)
     * @param endcreatetimestamp Filter end date - format YYYY-MM-DD (optional)
     * @param simulate Order response for various order statuses. Not for use in production. (optional)
     * @return OrderDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OrderDetailResponse getV5OrdersDetails(String ordernumber, String customernumber, String isocountrycode, String customerordernumber, LocalDate startcreatetimestamp, String endcreatetimestamp, String simulate) throws ApiException {
        ApiResponse<OrderDetailResponse> localVarResp = getV5OrdersDetailsWithHttpInfo(ordernumber, customernumber, isocountrycode, customerordernumber, startcreatetimestamp, endcreatetimestamp, simulate);
        return localVarResp.getData();
    }

    /**
     * Get Order Details
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customernumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 chars ISO country code (required)
     * @param customerordernumber Your PO/Order Number provide at the time of order creation (optional)
     * @param startcreatetimestamp Filter start date - format YYYY-MM-DD (optional)
     * @param endcreatetimestamp Filter end date - format YYYY-MM-DD (optional)
     * @param simulate Order response for various order statuses. Not for use in production. (optional)
     * @return ApiResponse&lt;OrderDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDetailResponse> getV5OrdersDetailsWithHttpInfo(String ordernumber, String customernumber, String isocountrycode, String customerordernumber, LocalDate startcreatetimestamp, String endcreatetimestamp, String simulate) throws ApiException {
        okhttp3.Call localVarCall = getV5OrdersDetailsValidateBeforeCall(ordernumber, customernumber, isocountrycode, customerordernumber, startcreatetimestamp, endcreatetimestamp, simulate, null);
        Type localVarReturnType = new TypeToken<OrderDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Details (asynchronously)
     * Use your Ingram Micro sales order number to search for existing orders or retrieve existing order details.   &lt;b&gt;The sales order number, customer number and isoCountryCode are required parameters.&lt;/b&gt;   The sales order number is returned in the Order Create POST response. Ingram Micro recommends that you save this number for future uses.   The IM sales order number can also be retrieved by searching for your existing order using the Order Search GET endpoint. You will need the customer PO number or order number that was provided at the time of order creation.   In a case when the IM sales order number is repeated, you can refine the result by providing customer order number for additional filtering or using the date range to filter orders by creation date.   Use the \&quot;simulate\&quot; query parameter to test the GET order response for various order statuses. This parameter is only available in the sandbox to help with development and testing of the GET order endpoint.
     * @param ordernumber Ingram Micro sales order number (required)
     * @param customernumber Your unique Ingram Micro customer number (required)
     * @param isocountrycode 2 chars ISO country code (required)
     * @param customerordernumber Your PO/Order Number provide at the time of order creation (optional)
     * @param startcreatetimestamp Filter start date - format YYYY-MM-DD (optional)
     * @param endcreatetimestamp Filter end date - format YYYY-MM-DD (optional)
     * @param simulate Order response for various order statuses. Not for use in production. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV5OrdersDetailsAsync(String ordernumber, String customernumber, String isocountrycode, String customerordernumber, LocalDate startcreatetimestamp, String endcreatetimestamp, String simulate, final ApiCallback<OrderDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV5OrdersDetailsValidateBeforeCall(ordernumber, customernumber, isocountrycode, customerordernumber, startcreatetimestamp, endcreatetimestamp, simulate, _callback);
        Type localVarReturnType = new TypeToken<OrderDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV5OrdersCreate
     * @param orderCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV5OrdersCreateCall(OrderCreateRequest orderCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderCreateRequest;

        // create path and map variables
        String localVarPath = "/resellers/v5/Orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "application" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV5OrdersCreateValidateBeforeCall(OrderCreateRequest orderCreateRequest, final ApiCallback _callback) throws ApiException {
        return postV5OrdersCreateCall(orderCreateRequest, _callback);

    }

    /**
     * Create a New Order
     * Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
     * @param orderCreateRequest  (optional)
     * @return OrderCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OrderCreateResponse postV5OrdersCreate(OrderCreateRequest orderCreateRequest) throws ApiException {
        ApiResponse<OrderCreateResponse> localVarResp = postV5OrdersCreateWithHttpInfo(orderCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a New Order
     * Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
     * @param orderCreateRequest  (optional)
     * @return ApiResponse&lt;OrderCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderCreateResponse> postV5OrdersCreateWithHttpInfo(OrderCreateRequest orderCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = postV5OrdersCreateValidateBeforeCall(orderCreateRequest, null);
        Type localVarReturnType = new TypeToken<OrderCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a New Order (asynchronously)
     * Instantly create and place orders. The POST API supports stocked SKUs as well as licensing and warranties SKUs.   Every order to be created with this API must complete these validations to be placed and processed:&lt;ul&gt;&lt;li&gt;SKU, shipping address, product authorization and stock allocations must clear validation.&lt;/li&gt;&lt;li&gt;Ingram Micro Sales validates pricing, stock or other processing parameters. Ingram Micro sales may place an order a hold if revision is necessary.&lt;/li&gt;&lt;li&gt;Credit validation confirms available credit prior to processing an order. If an order does not clear credit validation, the Ingram Micro sales rep or accounts receivable manager will contact you for next steps.&lt;/li&gt;&lt;li&gt;Warehouse validation selects the location closest to the destination zip code. If the stock is not available in any of the warehouses, Ingram Micro places a backorder in the warehouse closest to the destination zip code.&lt;/li&gt;&lt;/ul&gt;   Ingram Micro recommends that you provide the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for each SKU contained in each order.   When using &lt;strong&gt;vendorpartnumber&lt;/strong&gt; to place an order, please use the product search endpoint to find the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; for a specific &lt;strong&gt;vendorpartnumber&lt;/strong&gt;, and then supply the &lt;strong&gt;ingrampartnumber&lt;/strong&gt; to place an order.   &lt;strong&gt;NOTE:&lt;/strong&gt; You must have net terms to use the &lt;strong&gt;Ingram Micro Order Create API&lt;/strong&gt;. Ingram Micro offers trade credit when using our APIs, and repayment is based on net terms. For example, if your net terms agreement is net-30, you will have 30 days to make a full payment. Ingram Micro does not allow credit card transactions for API ordering.
     * @param orderCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV5OrdersCreateAsync(OrderCreateRequest orderCreateRequest, final ApiCallback<OrderCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV5OrdersCreateValidateBeforeCall(orderCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<OrderCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
