/*
 * Reseller API Documentation
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-11T06:39:09.782810Z[Etc/UTC]")
public class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner {
  /**
   * Unique 2-digit code of the Ingram Micro warehouse
   */
  @JsonAdapter(WarehouseidEnum.Adapter.class)
  public enum WarehouseidEnum {
    _10_MIRA_LOMA_CA("10-Mira Loma CA"),
    
    _20_CARROLLTON_TX("20-Carrollton TX"),
    
    _30_MILLINGTON_TN("30-Millington TN"),
    
    _40_CAROL_STREAM_IL("40-Carol Stream IL"),
    
    _80_JONESTOWN_PA("80-Jonestown PA");

    private String value;

    WarehouseidEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarehouseidEnum fromValue(String value) {
      for (WarehouseidEnum b : WarehouseidEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WarehouseidEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarehouseidEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarehouseidEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WarehouseidEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WarehouseidEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAREHOUSEID = "warehouseid";
  @SerializedName(SERIALIZED_NAME_WAREHOUSEID)
  private WarehouseidEnum warehouseid;

  public static final String SERIALIZED_NAME_WAREHOUSEDESCRIPTION = "warehousedescription";
  @SerializedName(SERIALIZED_NAME_WAREHOUSEDESCRIPTION)
  private String warehousedescription;

  public static final String SERIALIZED_NAME_AVAILABLEQUANTITY = "availablequantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLEQUANTITY)
  private Integer availablequantity;

  public static final String SERIALIZED_NAME_ONORDERQUANTITY = "onorderquantity";
  @SerializedName(SERIALIZED_NAME_ONORDERQUANTITY)
  private Integer onorderquantity;

  public static final String SERIALIZED_NAME_ONHOLDQUANTITY = "onholdquantity";
  @SerializedName(SERIALIZED_NAME_ONHOLDQUANTITY)
  private String onholdquantity;

  public static final String SERIALIZED_NAME_ETADATE = "etadate";
  @SerializedName(SERIALIZED_NAME_ETADATE)
  private String etadate;

  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner() {
  }

  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner warehouseid(WarehouseidEnum warehouseid) {
    this.warehouseid = warehouseid;
    return this;
  }

   /**
   * Unique 2-digit code of the Ingram Micro warehouse
   * @return warehouseid
  **/
  @javax.annotation.Nullable
  public WarehouseidEnum getWarehouseid() {
    return warehouseid;
  }

  public void setWarehouseid(WarehouseidEnum warehouseid) {
    this.warehouseid = warehouseid;
  }


  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner warehousedescription(String warehousedescription) {
    this.warehousedescription = warehousedescription;
    return this;
  }

   /**
   * City of the Ingram Micro warehouse location
   * @return warehousedescription
  **/
  @javax.annotation.Nullable
  public String getWarehousedescription() {
    return warehousedescription;
  }

  public void setWarehousedescription(String warehousedescription) {
    this.warehousedescription = warehousedescription;
  }


  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner availablequantity(Integer availablequantity) {
    this.availablequantity = availablequantity;
    return this;
  }

   /**
   * On hand available quantity
   * @return availablequantity
  **/
  @javax.annotation.Nullable
  public Integer getAvailablequantity() {
    return availablequantity;
  }

  public void setAvailablequantity(Integer availablequantity) {
    this.availablequantity = availablequantity;
  }


  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner onorderquantity(Integer onorderquantity) {
    this.onorderquantity = onorderquantity;
    return this;
  }

   /**
   * On Order quantity
   * @return onorderquantity
  **/
  @javax.annotation.Nullable
  public Integer getOnorderquantity() {
    return onorderquantity;
  }

  public void setOnorderquantity(Integer onorderquantity) {
    this.onorderquantity = onorderquantity;
  }


  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner onholdquantity(String onholdquantity) {
    this.onholdquantity = onholdquantity;
    return this;
  }

   /**
   * Get onholdquantity
   * @return onholdquantity
  **/
  @javax.annotation.Nullable
  public String getOnholdquantity() {
    return onholdquantity;
  }

  public void setOnholdquantity(String onholdquantity) {
    this.onholdquantity = onholdquantity;
  }


  public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner etadate(String etadate) {
    this.etadate = etadate;
    return this;
  }

   /**
   * Get etadate
   * @return etadate
  **/
  @javax.annotation.Nullable
  public String getEtadate() {
    return etadate;
  }

  public void setEtadate(String etadate) {
    this.etadate = etadate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner = (MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner) o;
    return Objects.equals(this.warehouseid, multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.warehouseid) &&
        Objects.equals(this.warehousedescription, multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.warehousedescription) &&
        Objects.equals(this.availablequantity, multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.availablequantity) &&
        Objects.equals(this.onorderquantity, multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.onorderquantity) &&
        Objects.equals(this.onholdquantity, multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.onholdquantity) &&
        Objects.equals(this.etadate, multiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.etadate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warehouseid, warehousedescription, availablequantity, onorderquantity, onholdquantity, etadate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner {\n");
    sb.append("    warehouseid: ").append(toIndentedString(warehouseid)).append("\n");
    sb.append("    warehousedescription: ").append(toIndentedString(warehousedescription)).append("\n");
    sb.append("    availablequantity: ").append(toIndentedString(availablequantity)).append("\n");
    sb.append("    onorderquantity: ").append(toIndentedString(onorderquantity)).append("\n");
    sb.append("    onholdquantity: ").append(toIndentedString(onholdquantity)).append("\n");
    sb.append("    etadate: ").append(toIndentedString(etadate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("warehouseid");
    openapiFields.add("warehousedescription");
    openapiFields.add("availablequantity");
    openapiFields.add("onorderquantity");
    openapiFields.add("onholdquantity");
    openapiFields.add("etadate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner is not found in the empty JSON string", MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("warehouseid") != null && !jsonObj.get("warehouseid").isJsonNull()) && !jsonObj.get("warehouseid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseid").toString()));
      }
      // validate the optional field `warehouseid`
      if (jsonObj.get("warehouseid") != null && !jsonObj.get("warehouseid").isJsonNull()) {
        WarehouseidEnum.validateJsonElement(jsonObj.get("warehouseid"));
      }
      if ((jsonObj.get("warehousedescription") != null && !jsonObj.get("warehousedescription").isJsonNull()) && !jsonObj.get("warehousedescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehousedescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehousedescription").toString()));
      }
      if ((jsonObj.get("onholdquantity") != null && !jsonObj.get("onholdquantity").isJsonNull()) && !jsonObj.get("onholdquantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onholdquantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onholdquantity").toString()));
      }
      if ((jsonObj.get("etadate") != null && !jsonObj.get("etadate").isJsonNull()) && !jsonObj.get("etadate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etadate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etadate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner>() {
           @Override
           public void write(JsonWriter out, MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner
  * @throws IOException if the JSON string is invalid with respect to MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner
  */
  public static MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner.class);
  }

 /**
  * Convert an instance of MultiSKUPriceAndStockResponseServiceresponsePriceandstockresponseDetailsInnerWarehousedetailsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

