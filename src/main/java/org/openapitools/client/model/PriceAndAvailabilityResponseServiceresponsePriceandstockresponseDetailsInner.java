/*
 * Reseller API Documentation
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WarehouseListType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-11T06:30:19.223435Z[Etc/UTC]")
public class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner {
  /**
   * SUCCESS or FAILED
   */
  @JsonAdapter(ItemstatusEnum.Adapter.class)
  public enum ItemstatusEnum {
    SUCCESS("SUCCESS"),
    
    FAILED("FAILED");

    private String value;

    ItemstatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemstatusEnum fromValue(String value) {
      for (ItemstatusEnum b : ItemstatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemstatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemstatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemstatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemstatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemstatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEMSTATUS = "itemstatus";
  @SerializedName(SERIALIZED_NAME_ITEMSTATUS)
  private ItemstatusEnum itemstatus;

  public static final String SERIALIZED_NAME_STATUSMESSAGE = "statusmessage";
  @SerializedName(SERIALIZED_NAME_STATUSMESSAGE)
  private String statusmessage;

  public static final String SERIALIZED_NAME_INGRAMPARTNUMBER = "ingrampartnumber";
  @SerializedName(SERIALIZED_NAME_INGRAMPARTNUMBER)
  private String ingrampartnumber;

  public static final String SERIALIZED_NAME_VENDORPARTNUMBER = "vendorpartnumber";
  @SerializedName(SERIALIZED_NAME_VENDORPARTNUMBER)
  private String vendorpartnumber;

  public static final String SERIALIZED_NAME_GLOBALSKUID = "globalskuid";
  @SerializedName(SERIALIZED_NAME_GLOBALSKUID)
  private String globalskuid;

  public static final String SERIALIZED_NAME_CUSTOMERPRICE = "customerprice";
  @SerializedName(SERIALIZED_NAME_CUSTOMERPRICE)
  private BigDecimal customerprice;

  public static final String SERIALIZED_NAME_PARTDESCRIPTION1 = "partdescription1";
  @SerializedName(SERIALIZED_NAME_PARTDESCRIPTION1)
  private String partdescription1;

  public static final String SERIALIZED_NAME_PARTDESCRIPTION2 = "partdescription2";
  @SerializedName(SERIALIZED_NAME_PARTDESCRIPTION2)
  private String partdescription2;

  public static final String SERIALIZED_NAME_VENDORNUMBER = "vendornumber";
  @SerializedName(SERIALIZED_NAME_VENDORNUMBER)
  private String vendornumber;

  public static final String SERIALIZED_NAME_VENDORNAME = "vendorname";
  @SerializedName(SERIALIZED_NAME_VENDORNAME)
  private String vendorname;

  public static final String SERIALIZED_NAME_CPUCODE = "cpucode";
  @SerializedName(SERIALIZED_NAME_CPUCODE)
  private String cpucode;

  /**
   * Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor
   */
  @JsonAdapter(PropertyClassEnum.Adapter.class)
  public enum PropertyClassEnum {
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D"),
    
    E("E"),
    
    F("F"),
    
    N("N"),
    
    O("O"),
    
    S("S"),
    
    V("V"),
    
    X("X");

    private String value;

    PropertyClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyClassEnum fromValue(String value) {
      for (PropertyClassEnum b : PropertyClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private PropertyClassEnum propertyClass;

  /**
   * Identifies if the SKU has been discontinued.
   */
  @JsonAdapter(SkustatusEnum.Adapter.class)
  public enum SkustatusEnum {
    ACTIVE("ACTIVE");

    private String value;

    SkustatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkustatusEnum fromValue(String value) {
      for (SkustatusEnum b : SkustatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkustatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkustatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkustatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkustatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkustatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKUSTATUS = "skustatus";
  @SerializedName(SERIALIZED_NAME_SKUSTATUS)
  private SkustatusEnum skustatus;

  public static final String SERIALIZED_NAME_MEDIACPU = "mediacpu";
  @SerializedName(SERIALIZED_NAME_MEDIACPU)
  private String mediacpu;

  public static final String SERIALIZED_NAME_CATEGORYSUBCATEGORY = "categorysubcategory";
  @SerializedName(SERIALIZED_NAME_CATEGORYSUBCATEGORY)
  private String categorysubcategory;

  public static final String SERIALIZED_NAME_RETAILPRICE = "retailprice";
  @SerializedName(SERIALIZED_NAME_RETAILPRICE)
  private BigDecimal retailprice;

  public static final String SERIALIZED_NAME_NEWMEDIA = "newmedia";
  @SerializedName(SERIALIZED_NAME_NEWMEDIA)
  private String newmedia;

  /**
   * Y - End user required N - Not required End user
   */
  @JsonAdapter(EnduserrequiredEnum.Adapter.class)
  public enum EnduserrequiredEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnduserrequiredEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnduserrequiredEnum fromValue(String value) {
      for (EnduserrequiredEnum b : EnduserrequiredEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnduserrequiredEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnduserrequiredEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnduserrequiredEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnduserrequiredEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnduserrequiredEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDUSERREQUIRED = "enduserrequired";
  @SerializedName(SERIALIZED_NAME_ENDUSERREQUIRED)
  private EnduserrequiredEnum enduserrequired;

  /**
   * Y- Allow Backorder Flag N- Not allowed
   */
  @JsonAdapter(BackorderflagEnum.Adapter.class)
  public enum BackorderflagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    BackorderflagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackorderflagEnum fromValue(String value) {
      for (BackorderflagEnum b : BackorderflagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackorderflagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackorderflagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackorderflagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackorderflagEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackorderflagEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKORDERFLAG = "backorderflag";
  @SerializedName(SERIALIZED_NAME_BACKORDERFLAG)
  private BackorderflagEnum backorderflag;

  public static final String SERIALIZED_NAME_SKUAUTHORIZED = "skuauthorized";
  @SerializedName(SERIALIZED_NAME_SKUAUTHORIZED)
  private String skuauthorized;

  public static final String SERIALIZED_NAME_EXTENDEDVENDORPARTNUMBER = "extendedvendorpartnumber";
  @SerializedName(SERIALIZED_NAME_EXTENDEDVENDORPARTNUMBER)
  private String extendedvendorpartnumber;

  public static final String SERIALIZED_NAME_WAREHOUSEDETAILS = "warehousedetails";
  @SerializedName(SERIALIZED_NAME_WAREHOUSEDETAILS)
  private List<WarehouseListType> warehousedetails;

  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner() {
  }

  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner itemstatus(ItemstatusEnum itemstatus) {
    this.itemstatus = itemstatus;
    return this;
  }

   /**
   * SUCCESS or FAILED
   * @return itemstatus
  **/
  @javax.annotation.Nullable
  public ItemstatusEnum getItemstatus() {
    return itemstatus;
  }

  public void setItemstatus(ItemstatusEnum itemstatus) {
    this.itemstatus = itemstatus;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner statusmessage(String statusmessage) {
    this.statusmessage = statusmessage;
    return this;
  }

   /**
   * Description of itemstatus
   * @return statusmessage
  **/
  @javax.annotation.Nullable
  public String getStatusmessage() {
    return statusmessage;
  }

  public void setStatusmessage(String statusmessage) {
    this.statusmessage = statusmessage;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner ingrampartnumber(String ingrampartnumber) {
    this.ingrampartnumber = ingrampartnumber;
    return this;
  }

   /**
   * Ingram Micro part number
   * @return ingrampartnumber
  **/
  @javax.annotation.Nullable
  public String getIngrampartnumber() {
    return ingrampartnumber;
  }

  public void setIngrampartnumber(String ingrampartnumber) {
    this.ingrampartnumber = ingrampartnumber;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner vendorpartnumber(String vendorpartnumber) {
    this.vendorpartnumber = vendorpartnumber;
    return this;
  }

   /**
   * Manufacturer/Vendor part number
   * @return vendorpartnumber
  **/
  @javax.annotation.Nullable
  public String getVendorpartnumber() {
    return vendorpartnumber;
  }

  public void setVendorpartnumber(String vendorpartnumber) {
    this.vendorpartnumber = vendorpartnumber;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner globalskuid(String globalskuid) {
    this.globalskuid = globalskuid;
    return this;
  }

   /**
   * Get globalskuid
   * @return globalskuid
  **/
  @javax.annotation.Nullable
  public String getGlobalskuid() {
    return globalskuid;
  }

  public void setGlobalskuid(String globalskuid) {
    this.globalskuid = globalskuid;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner customerprice(BigDecimal customerprice) {
    this.customerprice = customerprice;
    return this;
  }

   /**
   * Customer specific price for the product, excluding taxes
   * @return customerprice
  **/
  @javax.annotation.Nullable
  public BigDecimal getCustomerprice() {
    return customerprice;
  }

  public void setCustomerprice(BigDecimal customerprice) {
    this.customerprice = customerprice;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner partdescription1(String partdescription1) {
    this.partdescription1 = partdescription1;
    return this;
  }

   /**
   * Product description part 1
   * @return partdescription1
  **/
  @javax.annotation.Nullable
  public String getPartdescription1() {
    return partdescription1;
  }

  public void setPartdescription1(String partdescription1) {
    this.partdescription1 = partdescription1;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner partdescription2(String partdescription2) {
    this.partdescription2 = partdescription2;
    return this;
  }

   /**
   * Product description part 2
   * @return partdescription2
  **/
  @javax.annotation.Nullable
  public String getPartdescription2() {
    return partdescription2;
  }

  public void setPartdescription2(String partdescription2) {
    this.partdescription2 = partdescription2;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner vendornumber(String vendornumber) {
    this.vendornumber = vendornumber;
    return this;
  }

   /**
   * Get vendornumber
   * @return vendornumber
  **/
  @javax.annotation.Nullable
  public String getVendornumber() {
    return vendornumber;
  }

  public void setVendornumber(String vendornumber) {
    this.vendornumber = vendornumber;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner vendorname(String vendorname) {
    this.vendorname = vendorname;
    return this;
  }

   /**
   * Name of the vendor
   * @return vendorname
  **/
  @javax.annotation.Nullable
  public String getVendorname() {
    return vendorname;
  }

  public void setVendorname(String vendorname) {
    this.vendorname = vendorname;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner cpucode(String cpucode) {
    this.cpucode = cpucode;
    return this;
  }

   /**
   * Get cpucode
   * @return cpucode
  **/
  @javax.annotation.Nullable
  public String getCpucode() {
    return cpucode;
  }

  public void setCpucode(String cpucode) {
    this.cpucode = cpucode;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner propertyClass(PropertyClassEnum propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor
   * @return propertyClass
  **/
  @javax.annotation.Nullable
  public PropertyClassEnum getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(PropertyClassEnum propertyClass) {
    this.propertyClass = propertyClass;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner skustatus(SkustatusEnum skustatus) {
    this.skustatus = skustatus;
    return this;
  }

   /**
   * Identifies if the SKU has been discontinued.
   * @return skustatus
  **/
  @javax.annotation.Nullable
  public SkustatusEnum getSkustatus() {
    return skustatus;
  }

  public void setSkustatus(SkustatusEnum skustatus) {
    this.skustatus = skustatus;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner mediacpu(String mediacpu) {
    this.mediacpu = mediacpu;
    return this;
  }

   /**
   * Get mediacpu
   * @return mediacpu
  **/
  @javax.annotation.Nullable
  public String getMediacpu() {
    return mediacpu;
  }

  public void setMediacpu(String mediacpu) {
    this.mediacpu = mediacpu;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner categorysubcategory(String categorysubcategory) {
    this.categorysubcategory = categorysubcategory;
    return this;
  }

   /**
   * Get categorysubcategory
   * @return categorysubcategory
  **/
  @javax.annotation.Nullable
  public String getCategorysubcategory() {
    return categorysubcategory;
  }

  public void setCategorysubcategory(String categorysubcategory) {
    this.categorysubcategory = categorysubcategory;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner retailprice(BigDecimal retailprice) {
    this.retailprice = retailprice;
    return this;
  }

   /**
   * Get retailprice
   * @return retailprice
  **/
  @javax.annotation.Nullable
  public BigDecimal getRetailprice() {
    return retailprice;
  }

  public void setRetailprice(BigDecimal retailprice) {
    this.retailprice = retailprice;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner newmedia(String newmedia) {
    this.newmedia = newmedia;
    return this;
  }

   /**
   * Get newmedia
   * @return newmedia
  **/
  @javax.annotation.Nullable
  public String getNewmedia() {
    return newmedia;
  }

  public void setNewmedia(String newmedia) {
    this.newmedia = newmedia;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner enduserrequired(EnduserrequiredEnum enduserrequired) {
    this.enduserrequired = enduserrequired;
    return this;
  }

   /**
   * Y - End user required N - Not required End user
   * @return enduserrequired
  **/
  @javax.annotation.Nullable
  public EnduserrequiredEnum getEnduserrequired() {
    return enduserrequired;
  }

  public void setEnduserrequired(EnduserrequiredEnum enduserrequired) {
    this.enduserrequired = enduserrequired;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner backorderflag(BackorderflagEnum backorderflag) {
    this.backorderflag = backorderflag;
    return this;
  }

   /**
   * Y- Allow Backorder Flag N- Not allowed
   * @return backorderflag
  **/
  @javax.annotation.Nullable
  public BackorderflagEnum getBackorderflag() {
    return backorderflag;
  }

  public void setBackorderflag(BackorderflagEnum backorderflag) {
    this.backorderflag = backorderflag;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner skuauthorized(String skuauthorized) {
    this.skuauthorized = skuauthorized;
    return this;
  }

   /**
   * Get skuauthorized
   * @return skuauthorized
  **/
  @javax.annotation.Nullable
  public String getSkuauthorized() {
    return skuauthorized;
  }

  public void setSkuauthorized(String skuauthorized) {
    this.skuauthorized = skuauthorized;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner extendedvendorpartnumber(String extendedvendorpartnumber) {
    this.extendedvendorpartnumber = extendedvendorpartnumber;
    return this;
  }

   /**
   * Get extendedvendorpartnumber
   * @return extendedvendorpartnumber
  **/
  @javax.annotation.Nullable
  public String getExtendedvendorpartnumber() {
    return extendedvendorpartnumber;
  }

  public void setExtendedvendorpartnumber(String extendedvendorpartnumber) {
    this.extendedvendorpartnumber = extendedvendorpartnumber;
  }


  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner warehousedetails(List<WarehouseListType> warehousedetails) {
    this.warehousedetails = warehousedetails;
    return this;
  }

  public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner addWarehousedetailsItem(WarehouseListType warehousedetailsItem) {
    if (this.warehousedetails == null) {
      this.warehousedetails = new ArrayList<>();
    }
    this.warehousedetails.add(warehousedetailsItem);
    return this;
  }

   /**
   * Get warehousedetails
   * @return warehousedetails
  **/
  @javax.annotation.Nullable
  public List<WarehouseListType> getWarehousedetails() {
    return warehousedetails;
  }

  public void setWarehousedetails(List<WarehouseListType> warehousedetails) {
    this.warehousedetails = warehousedetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner = (PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner) o;
    return Objects.equals(this.itemstatus, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.itemstatus) &&
        Objects.equals(this.statusmessage, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.statusmessage) &&
        Objects.equals(this.ingrampartnumber, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.ingrampartnumber) &&
        Objects.equals(this.vendorpartnumber, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.vendorpartnumber) &&
        Objects.equals(this.globalskuid, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.globalskuid) &&
        Objects.equals(this.customerprice, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.customerprice) &&
        Objects.equals(this.partdescription1, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.partdescription1) &&
        Objects.equals(this.partdescription2, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.partdescription2) &&
        Objects.equals(this.vendornumber, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.vendornumber) &&
        Objects.equals(this.vendorname, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.vendorname) &&
        Objects.equals(this.cpucode, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.cpucode) &&
        Objects.equals(this.propertyClass, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.propertyClass) &&
        Objects.equals(this.skustatus, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.skustatus) &&
        Objects.equals(this.mediacpu, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.mediacpu) &&
        Objects.equals(this.categorysubcategory, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.categorysubcategory) &&
        Objects.equals(this.retailprice, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.retailprice) &&
        Objects.equals(this.newmedia, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.newmedia) &&
        Objects.equals(this.enduserrequired, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.enduserrequired) &&
        Objects.equals(this.backorderflag, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.backorderflag) &&
        Objects.equals(this.skuauthorized, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.skuauthorized) &&
        Objects.equals(this.extendedvendorpartnumber, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.extendedvendorpartnumber) &&
        Objects.equals(this.warehousedetails, priceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.warehousedetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemstatus, statusmessage, ingrampartnumber, vendorpartnumber, globalskuid, customerprice, partdescription1, partdescription2, vendornumber, vendorname, cpucode, propertyClass, skustatus, mediacpu, categorysubcategory, retailprice, newmedia, enduserrequired, backorderflag, skuauthorized, extendedvendorpartnumber, warehousedetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner {\n");
    sb.append("    itemstatus: ").append(toIndentedString(itemstatus)).append("\n");
    sb.append("    statusmessage: ").append(toIndentedString(statusmessage)).append("\n");
    sb.append("    ingrampartnumber: ").append(toIndentedString(ingrampartnumber)).append("\n");
    sb.append("    vendorpartnumber: ").append(toIndentedString(vendorpartnumber)).append("\n");
    sb.append("    globalskuid: ").append(toIndentedString(globalskuid)).append("\n");
    sb.append("    customerprice: ").append(toIndentedString(customerprice)).append("\n");
    sb.append("    partdescription1: ").append(toIndentedString(partdescription1)).append("\n");
    sb.append("    partdescription2: ").append(toIndentedString(partdescription2)).append("\n");
    sb.append("    vendornumber: ").append(toIndentedString(vendornumber)).append("\n");
    sb.append("    vendorname: ").append(toIndentedString(vendorname)).append("\n");
    sb.append("    cpucode: ").append(toIndentedString(cpucode)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    skustatus: ").append(toIndentedString(skustatus)).append("\n");
    sb.append("    mediacpu: ").append(toIndentedString(mediacpu)).append("\n");
    sb.append("    categorysubcategory: ").append(toIndentedString(categorysubcategory)).append("\n");
    sb.append("    retailprice: ").append(toIndentedString(retailprice)).append("\n");
    sb.append("    newmedia: ").append(toIndentedString(newmedia)).append("\n");
    sb.append("    enduserrequired: ").append(toIndentedString(enduserrequired)).append("\n");
    sb.append("    backorderflag: ").append(toIndentedString(backorderflag)).append("\n");
    sb.append("    skuauthorized: ").append(toIndentedString(skuauthorized)).append("\n");
    sb.append("    extendedvendorpartnumber: ").append(toIndentedString(extendedvendorpartnumber)).append("\n");
    sb.append("    warehousedetails: ").append(toIndentedString(warehousedetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemstatus");
    openapiFields.add("statusmessage");
    openapiFields.add("ingrampartnumber");
    openapiFields.add("vendorpartnumber");
    openapiFields.add("globalskuid");
    openapiFields.add("customerprice");
    openapiFields.add("partdescription1");
    openapiFields.add("partdescription2");
    openapiFields.add("vendornumber");
    openapiFields.add("vendorname");
    openapiFields.add("cpucode");
    openapiFields.add("class");
    openapiFields.add("skustatus");
    openapiFields.add("mediacpu");
    openapiFields.add("categorysubcategory");
    openapiFields.add("retailprice");
    openapiFields.add("newmedia");
    openapiFields.add("enduserrequired");
    openapiFields.add("backorderflag");
    openapiFields.add("skuauthorized");
    openapiFields.add("extendedvendorpartnumber");
    openapiFields.add("warehousedetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner is not found in the empty JSON string", PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("itemstatus") != null && !jsonObj.get("itemstatus").isJsonNull()) && !jsonObj.get("itemstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemstatus").toString()));
      }
      // validate the optional field `itemstatus`
      if (jsonObj.get("itemstatus") != null && !jsonObj.get("itemstatus").isJsonNull()) {
        ItemstatusEnum.validateJsonElement(jsonObj.get("itemstatus"));
      }
      if ((jsonObj.get("statusmessage") != null && !jsonObj.get("statusmessage").isJsonNull()) && !jsonObj.get("statusmessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusmessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusmessage").toString()));
      }
      if ((jsonObj.get("ingrampartnumber") != null && !jsonObj.get("ingrampartnumber").isJsonNull()) && !jsonObj.get("ingrampartnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingrampartnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingrampartnumber").toString()));
      }
      if ((jsonObj.get("vendorpartnumber") != null && !jsonObj.get("vendorpartnumber").isJsonNull()) && !jsonObj.get("vendorpartnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorpartnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorpartnumber").toString()));
      }
      if ((jsonObj.get("globalskuid") != null && !jsonObj.get("globalskuid").isJsonNull()) && !jsonObj.get("globalskuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalskuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalskuid").toString()));
      }
      if ((jsonObj.get("partdescription1") != null && !jsonObj.get("partdescription1").isJsonNull()) && !jsonObj.get("partdescription1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partdescription1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partdescription1").toString()));
      }
      if ((jsonObj.get("partdescription2") != null && !jsonObj.get("partdescription2").isJsonNull()) && !jsonObj.get("partdescription2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partdescription2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partdescription2").toString()));
      }
      if ((jsonObj.get("vendornumber") != null && !jsonObj.get("vendornumber").isJsonNull()) && !jsonObj.get("vendornumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendornumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendornumber").toString()));
      }
      if ((jsonObj.get("vendorname") != null && !jsonObj.get("vendorname").isJsonNull()) && !jsonObj.get("vendorname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorname").toString()));
      }
      if ((jsonObj.get("cpucode") != null && !jsonObj.get("cpucode").isJsonNull()) && !jsonObj.get("cpucode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpucode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpucode").toString()));
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      // validate the optional field `class`
      if (jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) {
        PropertyClassEnum.validateJsonElement(jsonObj.get("class"));
      }
      if ((jsonObj.get("skustatus") != null && !jsonObj.get("skustatus").isJsonNull()) && !jsonObj.get("skustatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skustatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skustatus").toString()));
      }
      // validate the optional field `skustatus`
      if (jsonObj.get("skustatus") != null && !jsonObj.get("skustatus").isJsonNull()) {
        SkustatusEnum.validateJsonElement(jsonObj.get("skustatus"));
      }
      if ((jsonObj.get("mediacpu") != null && !jsonObj.get("mediacpu").isJsonNull()) && !jsonObj.get("mediacpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediacpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediacpu").toString()));
      }
      if ((jsonObj.get("categorysubcategory") != null && !jsonObj.get("categorysubcategory").isJsonNull()) && !jsonObj.get("categorysubcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categorysubcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categorysubcategory").toString()));
      }
      if ((jsonObj.get("newmedia") != null && !jsonObj.get("newmedia").isJsonNull()) && !jsonObj.get("newmedia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newmedia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newmedia").toString()));
      }
      if ((jsonObj.get("enduserrequired") != null && !jsonObj.get("enduserrequired").isJsonNull()) && !jsonObj.get("enduserrequired").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enduserrequired` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enduserrequired").toString()));
      }
      // validate the optional field `enduserrequired`
      if (jsonObj.get("enduserrequired") != null && !jsonObj.get("enduserrequired").isJsonNull()) {
        EnduserrequiredEnum.validateJsonElement(jsonObj.get("enduserrequired"));
      }
      if ((jsonObj.get("backorderflag") != null && !jsonObj.get("backorderflag").isJsonNull()) && !jsonObj.get("backorderflag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backorderflag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backorderflag").toString()));
      }
      // validate the optional field `backorderflag`
      if (jsonObj.get("backorderflag") != null && !jsonObj.get("backorderflag").isJsonNull()) {
        BackorderflagEnum.validateJsonElement(jsonObj.get("backorderflag"));
      }
      if ((jsonObj.get("skuauthorized") != null && !jsonObj.get("skuauthorized").isJsonNull()) && !jsonObj.get("skuauthorized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuauthorized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuauthorized").toString()));
      }
      if ((jsonObj.get("extendedvendorpartnumber") != null && !jsonObj.get("extendedvendorpartnumber").isJsonNull()) && !jsonObj.get("extendedvendorpartnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extendedvendorpartnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extendedvendorpartnumber").toString()));
      }
      if (jsonObj.get("warehousedetails") != null && !jsonObj.get("warehousedetails").isJsonNull()) {
        JsonArray jsonArraywarehousedetails = jsonObj.getAsJsonArray("warehousedetails");
        if (jsonArraywarehousedetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warehousedetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warehousedetails` to be an array in the JSON string but got `%s`", jsonObj.get("warehousedetails").toString()));
          }

          // validate the optional field `warehousedetails` (array)
          for (int i = 0; i < jsonArraywarehousedetails.size(); i++) {
            WarehouseListType.validateJsonElement(jsonArraywarehousedetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner>() {
           @Override
           public void write(JsonWriter out, PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner
  * @throws IOException if the JSON string is invalid with respect to PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner
  */
  public static PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner.class);
  }

 /**
  * Convert an instance of PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

