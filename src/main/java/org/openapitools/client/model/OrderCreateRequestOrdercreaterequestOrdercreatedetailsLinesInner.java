/*
 * Reseller API Documentation
 * For Resellers. <br> Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerEnduser;
import org.openapitools.client.model.OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-11T06:39:09.782810Z[Etc/UTC]")
public class OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner {
  /**
   * Values are “P” for product or “C” for comments. This can be left blank when ordering product and a “P” will be assumed.  If you are adding a COMMENT, then this value must be “C”.  Extended spec for comments:   Attribute Name: “commenttext” Attribute Value: “thank you for the order”  To make the comment invisible to the packing slip place “///” in front of the comment in the Attribute Value field.  This will allow the Ingram sales rep to see the comment on the order but will not forward on to shipping documents.
   */
  @JsonAdapter(LinetypeEnum.Adapter.class)
  public enum LinetypeEnum {
    P("P"),
    
    C("C");

    private String value;

    LinetypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinetypeEnum fromValue(String value) {
      for (LinetypeEnum b : LinetypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinetypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinetypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinetypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinetypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinetypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINETYPE = "linetype";
  @SerializedName(SERIALIZED_NAME_LINETYPE)
  private LinetypeEnum linetype;

  public static final String SERIALIZED_NAME_LINENUMBER = "linenumber";
  @SerializedName(SERIALIZED_NAME_LINENUMBER)
  private String linenumber;

  public static final String SERIALIZED_NAME_INGRAMPARTNUMBER = "ingrampartnumber";
  @SerializedName(SERIALIZED_NAME_INGRAMPARTNUMBER)
  private String ingrampartnumber;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_VENDORPARTNUMBER = "vendorpartnumber";
  @SerializedName(SERIALIZED_NAME_VENDORPARTNUMBER)
  private String vendorpartnumber;

  public static final String SERIALIZED_NAME_CUSTOMERPARTNUMBER = "customerpartnumber";
  @SerializedName(SERIALIZED_NAME_CUSTOMERPARTNUMBER)
  private String customerpartnumber;

  public static final String SERIALIZED_NAME_UP_C_CODE = "UPCCode";
  @SerializedName(SERIALIZED_NAME_UP_C_CODE)
  private String upCCode;

  public static final String SERIALIZED_NAME_WAREHOUSEID = "warehouseid";
  @SerializedName(SERIALIZED_NAME_WAREHOUSEID)
  private String warehouseid;

  public static final String SERIALIZED_NAME_UNITPRICE = "unitprice";
  @SerializedName(SERIALIZED_NAME_UNITPRICE)
  private String unitprice;

  public static final String SERIALIZED_NAME_ENDUSER = "enduser";
  @SerializedName(SERIALIZED_NAME_ENDUSER)
  private OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerEnduser enduser;

  public static final String SERIALIZED_NAME_PRODUCTEXTENDEDSPECS = "productextendedspecs";
  @SerializedName(SERIALIZED_NAME_PRODUCTEXTENDEDSPECS)
  private List<OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner> productextendedspecs;

  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner() {
  }

  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner linetype(LinetypeEnum linetype) {
    this.linetype = linetype;
    return this;
  }

   /**
   * Values are “P” for product or “C” for comments. This can be left blank when ordering product and a “P” will be assumed.  If you are adding a COMMENT, then this value must be “C”.  Extended spec for comments:   Attribute Name: “commenttext” Attribute Value: “thank you for the order”  To make the comment invisible to the packing slip place “///” in front of the comment in the Attribute Value field.  This will allow the Ingram sales rep to see the comment on the order but will not forward on to shipping documents.
   * @return linetype
  **/
  @javax.annotation.Nullable
  public LinetypeEnum getLinetype() {
    return linetype;
  }

  public void setLinetype(LinetypeEnum linetype) {
    this.linetype = linetype;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner linenumber(String linenumber) {
    this.linenumber = linenumber;
    return this;
  }

   /**
   * This is used when a partner wants to use their own line number. Can be left blank.
   * @return linenumber
  **/
  @javax.annotation.Nullable
  public String getLinenumber() {
    return linenumber;
  }

  public void setLinenumber(String linenumber) {
    this.linenumber = linenumber;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner ingrampartnumber(String ingrampartnumber) {
    this.ingrampartnumber = ingrampartnumber;
    return this;
  }

   /**
   * This is the Ingram sku number to be used for placing an order.
   * @return ingrampartnumber
  **/
  @javax.annotation.Nullable
  public String getIngrampartnumber() {
    return ingrampartnumber;
  }

  public void setIngrampartnumber(String ingrampartnumber) {
    this.ingrampartnumber = ingrampartnumber;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity that is to be ordered.
   * @return quantity
  **/
  @javax.annotation.Nonnull
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner vendorpartnumber(String vendorpartnumber) {
    this.vendorpartnumber = vendorpartnumber;
    return this;
  }

   /**
   * The Manufacturer part number. Can be used to place an order instead of the Ingram sku.  If there are multiple Ingram part numbers to one vendor part number.  The order will be rejected.
   * @return vendorpartnumber
  **/
  @javax.annotation.Nullable
  public String getVendorpartnumber() {
    return vendorpartnumber;
  }

  public void setVendorpartnumber(String vendorpartnumber) {
    this.vendorpartnumber = vendorpartnumber;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner customerpartnumber(String customerpartnumber) {
    this.customerpartnumber = customerpartnumber;
    return this;
  }

   /**
   * This is the Customers unique part numbers that must be crossed referenced to the Ingram Micro Sku before it can be used.  Please contact your sales rep for additional information on how to set this up.
   * @return customerpartnumber
  **/
  @javax.annotation.Nullable
  public String getCustomerpartnumber() {
    return customerpartnumber;
  }

  public void setCustomerpartnumber(String customerpartnumber) {
    this.customerpartnumber = customerpartnumber;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner upCCode(String upCCode) {
    this.upCCode = upCCode;
    return this;
  }

   /**
   * Get upCCode
   * @return upCCode
  **/
  @javax.annotation.Nullable
  public String getUpCCode() {
    return upCCode;
  }

  public void setUpCCode(String upCCode) {
    this.upCCode = upCCode;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner warehouseid(String warehouseid) {
    this.warehouseid = warehouseid;
    return this;
  }

   /**
   * Get warehouseid
   * @return warehouseid
  **/
  @javax.annotation.Nullable
  public String getWarehouseid() {
    return warehouseid;
  }

  public void setWarehouseid(String warehouseid) {
    this.warehouseid = warehouseid;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner unitprice(String unitprice) {
    this.unitprice = unitprice;
    return this;
  }

   /**
   * This is a requested price from the customer. Pre-approval is necessary before using this feature.  A methodology called price variance to manage requested pricing needs to be setup in advance by your sales rep.  If unit price is provided without this advanced setup the unit price will be ignored and standard Ingram Micro pricing will apply.
   * @return unitprice
  **/
  @javax.annotation.Nullable
  public String getUnitprice() {
    return unitprice;
  }

  public void setUnitprice(String unitprice) {
    this.unitprice = unitprice;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner enduser(OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerEnduser enduser) {
    this.enduser = enduser;
    return this;
  }

   /**
   * Get enduser
   * @return enduser
  **/
  @javax.annotation.Nullable
  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerEnduser getEnduser() {
    return enduser;
  }

  public void setEnduser(OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerEnduser enduser) {
    this.enduser = enduser;
  }


  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner productextendedspecs(List<OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner> productextendedspecs) {
    this.productextendedspecs = productextendedspecs;
    return this;
  }

  public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner addProductextendedspecsItem(OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner productextendedspecsItem) {
    if (this.productextendedspecs == null) {
      this.productextendedspecs = new ArrayList<>();
    }
    this.productextendedspecs.add(productextendedspecsItem);
    return this;
  }

   /**
   * Get productextendedspecs
   * @return productextendedspecs
  **/
  @javax.annotation.Nullable
  public List<OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner> getProductextendedspecs() {
    return productextendedspecs;
  }

  public void setProductextendedspecs(List<OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner> productextendedspecs) {
    this.productextendedspecs = productextendedspecs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner = (OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner) o;
    return Objects.equals(this.linetype, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.linetype) &&
        Objects.equals(this.linenumber, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.linenumber) &&
        Objects.equals(this.ingrampartnumber, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.ingrampartnumber) &&
        Objects.equals(this.quantity, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.quantity) &&
        Objects.equals(this.vendorpartnumber, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.vendorpartnumber) &&
        Objects.equals(this.customerpartnumber, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.customerpartnumber) &&
        Objects.equals(this.upCCode, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.upCCode) &&
        Objects.equals(this.warehouseid, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.warehouseid) &&
        Objects.equals(this.unitprice, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.unitprice) &&
        Objects.equals(this.enduser, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.enduser) &&
        Objects.equals(this.productextendedspecs, orderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.productextendedspecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linetype, linenumber, ingrampartnumber, quantity, vendorpartnumber, customerpartnumber, upCCode, warehouseid, unitprice, enduser, productextendedspecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner {\n");
    sb.append("    linetype: ").append(toIndentedString(linetype)).append("\n");
    sb.append("    linenumber: ").append(toIndentedString(linenumber)).append("\n");
    sb.append("    ingrampartnumber: ").append(toIndentedString(ingrampartnumber)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    vendorpartnumber: ").append(toIndentedString(vendorpartnumber)).append("\n");
    sb.append("    customerpartnumber: ").append(toIndentedString(customerpartnumber)).append("\n");
    sb.append("    upCCode: ").append(toIndentedString(upCCode)).append("\n");
    sb.append("    warehouseid: ").append(toIndentedString(warehouseid)).append("\n");
    sb.append("    unitprice: ").append(toIndentedString(unitprice)).append("\n");
    sb.append("    enduser: ").append(toIndentedString(enduser)).append("\n");
    sb.append("    productextendedspecs: ").append(toIndentedString(productextendedspecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("linetype");
    openapiFields.add("linenumber");
    openapiFields.add("ingrampartnumber");
    openapiFields.add("quantity");
    openapiFields.add("vendorpartnumber");
    openapiFields.add("customerpartnumber");
    openapiFields.add("UPCCode");
    openapiFields.add("warehouseid");
    openapiFields.add("unitprice");
    openapiFields.add("enduser");
    openapiFields.add("productextendedspecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("quantity");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner is not found in the empty JSON string", OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("linetype") != null && !jsonObj.get("linetype").isJsonNull()) && !jsonObj.get("linetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linetype").toString()));
      }
      // validate the optional field `linetype`
      if (jsonObj.get("linetype") != null && !jsonObj.get("linetype").isJsonNull()) {
        LinetypeEnum.validateJsonElement(jsonObj.get("linetype"));
      }
      if ((jsonObj.get("linenumber") != null && !jsonObj.get("linenumber").isJsonNull()) && !jsonObj.get("linenumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linenumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linenumber").toString()));
      }
      if ((jsonObj.get("ingrampartnumber") != null && !jsonObj.get("ingrampartnumber").isJsonNull()) && !jsonObj.get("ingrampartnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingrampartnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingrampartnumber").toString()));
      }
      if (!jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if ((jsonObj.get("vendorpartnumber") != null && !jsonObj.get("vendorpartnumber").isJsonNull()) && !jsonObj.get("vendorpartnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorpartnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorpartnumber").toString()));
      }
      if ((jsonObj.get("customerpartnumber") != null && !jsonObj.get("customerpartnumber").isJsonNull()) && !jsonObj.get("customerpartnumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerpartnumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerpartnumber").toString()));
      }
      if ((jsonObj.get("UPCCode") != null && !jsonObj.get("UPCCode").isJsonNull()) && !jsonObj.get("UPCCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UPCCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UPCCode").toString()));
      }
      if ((jsonObj.get("warehouseid") != null && !jsonObj.get("warehouseid").isJsonNull()) && !jsonObj.get("warehouseid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseid").toString()));
      }
      if ((jsonObj.get("unitprice") != null && !jsonObj.get("unitprice").isJsonNull()) && !jsonObj.get("unitprice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitprice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitprice").toString()));
      }
      // validate the optional field `enduser`
      if (jsonObj.get("enduser") != null && !jsonObj.get("enduser").isJsonNull()) {
        OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerEnduser.validateJsonElement(jsonObj.get("enduser"));
      }
      if (jsonObj.get("productextendedspecs") != null && !jsonObj.get("productextendedspecs").isJsonNull()) {
        JsonArray jsonArrayproductextendedspecs = jsonObj.getAsJsonArray("productextendedspecs");
        if (jsonArrayproductextendedspecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productextendedspecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productextendedspecs` to be an array in the JSON string but got `%s`", jsonObj.get("productextendedspecs").toString()));
          }

          // validate the optional field `productextendedspecs` (array)
          for (int i = 0; i < jsonArrayproductextendedspecs.size(); i++) {
            OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInnerProductextendedspecsInner.validateJsonElement(jsonArrayproductextendedspecs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner>() {
           @Override
           public void write(JsonWriter out, OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner
  * @throws IOException if the JSON string is invalid with respect to OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner
  */
  public static OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.class);
  }

 /**
  * Convert an instance of OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

